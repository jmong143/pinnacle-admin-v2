{"version":3,"sources":["actions/types.js","actions/module/postActions.js","components/Posts.js","components/Postform.js","components/main-content/index.js","App.js","components/__plugins/noty.js","actions/payload.js","actions/env.js","actions/module/validateAdminActions.js","components/__layout/Navbar.js","actions/module/subjectActions.js","actions/module/uploadActions.js","actions/module/newsActions.js","actions/module/userActions.js","actions/module/topicActions.js","actions/module/questionsActions.js","components/lesson/index.js","actions/module/subjectCodeActions.js","components/__layout/Modal.js","components/subject/index.js","actions/module/loginActions.js","components/topic/index.js","components/users/index.js","components/subject-code/index.js","components/news/index.js","components/question/index.js","actions/module/mockActions.js","serviceWorker.js","reducers/module/lessonReducers.js","reducers/module/mockReducers.js","reducers/module/subjectCodeReducers.js","reducers/index.js","store.js","reducers/module/questionsReducers.js"],"names":["ADMIN_LOGIN","VALIDATE_ADMIN","VALIDATE_PASSWORD","FETCH_SUBJECTS","SUBJECT_INFO","SUBJECT_UPDATE","SUBJECT_DELETE","ADMIN_UPLOAD_FILE","ADMIN_GET_FILE","FETCH_USERS","NEW_USER","USER_INFO","USER_DELETE","USER_UPDATE","FETCH_NEWS","NEWS_INFO","NEW_NEWS","NEWS_UPDATE","NEWS_DELETE","FETCH_TOPICS","NEW_TOPIC","TOPIC_UPDATE","TOPIC_DELETE","FETCH_QUESTIONS","CREATE_QUESTION","QUESTION_INFO","QUESTION_UPDATE","QUESTIONS_DELETE","FETCH_LESSONS","LESSON_INFO","NEW_LESSON","LESSON_UPDATE","LESSON_DELETE","FETCH_MOCK","MOCK_INFO","NEW_MOCK_EXAM","FETCH_SUBJECT_CODE","NEW_SUBJECT_CODE","SUBJECT_CODE_INFO","SUBJECT_CODE_UPDATE","RESEND_SUBJECT_CODE","receivePostsData","posts","type","payload","receivePostData","post","Posts","this","props","fetchPosts","nextProps","newPost","unshift","postItems","map","key","id","title","body","React","Component","connect","state","items","item","dispatch","axios","get","then","response","data","catch","error","console","log","PostForm","onChange","bind","onSubmit","name","value","e","setState","target","preventDefault","createPost","postData","App","notification","message","Noty","text","timeout","show","receiveData","BasePath","headerNonUser","headers","validateToken","headerAdminUser","JSON","parse","localStorage","getItem","token","auth","status","NavbarComponent","isOpen","btnAdminLogout","class","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","onClick","testData","fetchSubjects","result","subjectDelete","delete","uploadFile","fileData","formData","FormData","append","filename","mimetype","getFile","fileName","responseType","reader","window","FileReader","readAsDataURL","onload","imageDataUrl","fetchNews","newsDelete","fetchUsers","userDelete","fetchTopic","fetchQuestions","subjectId","topicId","url","newQuestion","SearchBar","Search","LessonComponent","ClearSearchButton","toggleState","lessonId","isModalOpen","fetchLessonInfo","cardStatus","cardActive","subjectName","topicName","lessonContent","lessonName","updateLessonContent","updateLessonName","showCard","formCreateLesson","formUpdateLesson","onChangeTopic","onChangeText","onEditorChange","tokenValidate","history","push","lessonInfo","content","todo","lesson","_id","document","scrollTop","documentElement","subject","topic","description","fetchLesson","evt","getContent","disabled","newLesson","res","stringify","updateLesson","lessonListsArr","Array","lessonLists","length","forEach","action","className","icon","faEye","faEdit","faTrash","Navbar","faTimes","placeholder","required","for","initialValue","init","height","menubar","plugins","toolbar","a","fetchSubjectCodeInfo","newSubjectCode","updateSubjectCode","resendSubjectCode","dataField","style","width","searchable","formCreateSubject","formUpdateSubject","onChangeFile","fileUploaded","addedSubject","subjectDescription","fileTargetValue","put","selectedSubjects","subjectCodeEmail","count","subjectTotalCode","organizationName","subjectOrgName","fetchSubjectCode","subCodeListsArr","subjectCode","isActivated","userId","subCode","orgName","editor","editorData","getData","questionsArr","$this","questionsLists","handleEditorChange","updateQuestionChoice1","updateQuestionChoice2","updateQuestionChoice3","updateQuestionChoice4","updateQuestionAnswer","fetchMock","isLocalhost","location","hostname","match","config","navigator","publicUrl","origin","onSuccess","initialState","combineReducers","login","loginReducers","postReducers","validateAdminReducers","subjects","subjectReducers","uploadFileReducers","userReducers","newsReducers","topicReducers","questions","questionsReducers","lessons","lessonReducers","mockReducers","subjectCodeReducers","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","list","info","subjectCodeUpdate","subjectCodeResend"],"mappings":"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","file":"static/js/main.44233991.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POSTS = 'NEW_POSTS';\r\nexport const ADMIN_LOGIN = 'ADMIN_LOGIN';\r\nexport const VALIDATE_ADMIN = 'VALIDATE_ADMIN';\r\nexport const VALIDATE_PASSWORD = 'VALIDATE_PASSWORD';\r\nexport const FETCH_SUBJECTS = 'FETCH_SUBJECTS';\r\nexport const NEW_SUBJECT = 'NEW_SUBJECT';\r\nexport const SUBJECT_INFO = 'SUBJECT_INFO';\r\nexport const SUBJECT_UPDATE = 'SUBJECT_UPDATE';\r\nexport const SUBJECT_DELETE = 'SUBJECT_DELETE';\r\nexport const ADMIN_UPLOAD_FILE = 'ADMIN_FILE_UPLOAD';\r\nexport const ADMIN_GET_FILE = 'ADMIN_GET_FILE';\r\nexport const FETCH_USERS = 'FETCH_USERS';\r\nexport const NEW_USER = 'NEW_USER';\r\nexport const USER_INFO = 'USER_INFO';\r\nexport const USER_DELETE = 'USER_DELETE';\r\nexport const USER_UPDATE = 'USER_UPDATE';\r\n\r\nexport const FETCH_NEWS = 'FETCH_NEWS';\r\nexport const NEWS_INFO = 'NEWS_INFO';\r\nexport const NEW_NEWS = 'NEW_NEWS';\r\nexport const NEWS_UPDATE = 'NEWS_UPDATE';\r\nexport const NEWS_DELETE = 'NEWS_DELETE';\r\n\r\nexport const FETCH_TOPICS = 'FETCH_TOPICS';\r\nexport const NEW_TOPIC = 'NEW_TOPIC';\r\nexport const TOPIC_UPDATE = 'TOPIC_UPDATE';\r\nexport const TOPIC_DELETE = 'TOPIC_DELETE';\r\n\r\nexport const FETCH_QUESTIONS = 'FETCH_QUESTIONS';\r\nexport const CREATE_QUESTION = 'CREATE_QUESTIONS';\r\nexport const QUESTION_INFO = 'QUESTION_INFO';\r\nexport const QUESTION_UPDATE = 'QUESTION_UPDATE';\r\nexport const QUESTIONS_DELETE = 'QUESTIONS_DELETE';\r\n\r\nexport const FETCH_LESSONS = 'FETCH_LESSONS';\r\nexport const LESSON_INFO = 'LESSON_INFO';\r\nexport const NEW_LESSON = 'NEW_LESSON';\r\nexport const LESSON_UPDATE = 'LESSON_UPDATE';\r\nexport const LESSON_DELETE = 'LESSON_DELETE';\r\n\r\nexport const FETCH_MOCK = 'FETCH_MOCK';\r\nexport const MOCK_INFO = 'MOCK_INFO';\r\nexport const NEW_MOCK_EXAM = 'NEW_MOCK_EXAM';\r\n\r\nexport const FETCH_SUBJECT_CODE = 'FETCH_SUBJECT_CODE';\r\nexport const NEW_SUBJECT_CODE = 'NEW_SUBJECT_CODE';\r\nexport const SUBJECT_CODE_INFO = 'SUBJECT_CODE_INFO';\r\nexport const SUBJECT_CODE_UPDATE = 'SUBJECT_CODE_UPDATE';\r\nexport const RESEND_SUBJECT_CODE = 'RESEND_SUBJECT_CODE';","import axios from 'axios';\r\nimport { FETCH_POSTS, NEW_POSTS } from '../types';\r\n\r\nexport function fetchPosts() {\r\n    return function(dispatch){\r\n        return axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then((response) => dispatch(receivePostsData(response.data)))\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n    }\r\n}\r\n\r\nexport function createPost(postData){\r\n    return function(dispatch){\r\n        return axios.post('https://jsonplaceholder.typicode.com/posts', postData)\r\n        .then((response) => dispatch(receivePostData(response.data)))\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n    }\r\n}\r\n\r\nexport function loginPost(postData){\r\n    let config = {\r\n        headers: {\r\n            'x-client-id': 'Jeyk',\r\n            'x-client-secret': 'Qwe12345'\r\n        }\r\n      }\r\n    return function(dispatch){\r\n        return axios.post('https://pinnacle-backend-v1.herokuapp.com/auth/admin/login', postData, config)\r\n        .then((response) => dispatch(receivePostData(response.data)))\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n    }\r\n}\r\n\r\nexport const receivePostsData = posts => ({\r\n  type: FETCH_POSTS,\r\n  payload: posts\r\n})\r\n\r\nexport const receivePostData = post => ({\r\n  type: NEW_POSTS,\r\n  payload: post\r\n})\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/module/postActions';\r\n\r\nclass Posts extends React.Component {\r\n\r\n    componentWillMount(){\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.newPost){\r\n            this.props.posts.unshift(nextProps.newPost)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const postItems = this.props.posts.map(post => (\r\n            <div key = {post.id}>\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ));\r\n        return (\r\n            <div>\r\n                <h1>Posts</h1>\r\n                { postItems }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state.posts.items,\r\n    newPost: state.posts.item\r\n})\r\n//first param map state to props, pass funtion\r\n//component name\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/module/postActions';\r\n\r\nclass PostForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Add post</h1>\r\n                <form onSubmit = {this.onSubmit}>\r\n                    <div>\r\n                        <label>Title</label> <br/>\r\n                        <input type = \"text\" name = \"title\" value = {this.state.title} onChange = {this.onChange}/>\r\n                    </div>\r\n                    <br/>\r\n                    <div>\r\n                        <label>Body</label> <br/>\r\n                        <textarea name = \"body\" value = {this.state.body} onChange = {this.onChange}/>\r\n                    </div>\r\n                    <br/>\r\n                    <button type = \"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onChange(e){\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n        const post = { \r\n            title: this.state.title,\r\n            body: this.state.body\r\n        }\r\n        this.props.createPost(post);\r\n        \r\n        \r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { createPost })(PostForm);\r\n","import React, { Component } from 'react'\r\n\r\nimport Posts from '../../components/Posts';\r\nexport default class MainContent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Posts/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\n\r\nimport Posts from './components/Posts';\r\nimport PostForm from './components/Postform';\r\n\r\nimport MainContent from '../src/components/main-content';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n        <PostForm/>\r\n        <Posts/>\r\n        <hr/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import Noty from 'noty';\r\nimport \"../../../node_modules/noty/lib/noty.css\";\r\nimport \"../../../node_modules/noty/lib/themes/mint.css\";\r\nexport function notification(type, message){\r\n    new Noty({\r\n        text: message,\r\n        type: type,\r\n        timeout: 4000\r\n        //\"alert\", \"error\", \"info\", \"information\", \"success\", \"warning\"\r\n    }).show();\r\n}\r\n","export const receiveData = (type, data) => ({\r\n  type: type,\r\n  payload: data\r\n})\r\n","// export const BasePath = 'http://localhost:8080';\r\nexport const BasePath = 'https://pinnacle-backend-api.herokuapp.com';\r\n// export const BasePath = 'http://localhost:8080';\r\n\r\n\r\n// export const BasePath = 'http://192.169.243.16:8030';\r\nexport const headerNonUser = {\r\n    headers: {\r\n        'x-client-id': 'Jeyk',\r\n        'x-client-secret': 'Qwe12345'\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport { VALIDATE_ADMIN, VALIDATE_PASSWORD } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\n\r\nexport function validateToken(){\r\n\r\n    return function(dispatch){\r\n\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/auth/admin/sessions/validate`, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data){\r\n                let auth = response.data.auth;\r\n                let message = response.data.message;\r\n                let status = response.status\r\n                return dispatch(receiveData(VALIDATE_ADMIN, {status, auth, message}))\r\n                // dispatch({type: VALIDATE_ADMIN, payload: auth})\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(VALIDATE_ADMIN, error))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function validatePassword(formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/auth/admin/password/validate`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(VALIDATE_PASSWORD, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(VALIDATE_PASSWORD, error))\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport './styles/navbar.css';\r\nimport { notification } from '../__plugins/noty';\r\nimport { validateToken } from '../../actions/module/validateAdminActions';\r\n\r\nclass NavbarComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          isOpen: false\r\n        };\r\n        this.btnAdminLogout = this.btnAdminLogout.bind(this);\r\n      }\r\n\r\n    \r\n    render() {\r\n      let _this = this;\r\n        return (\r\n            <div>\r\n              <nav class=\"navbar navbar-icon-top navbar-expand-lg navbar-dark bg-dark\">\r\n                \r\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                  <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                  <ul class=\"navbar-nav ml-auto\">\r\n                    {/* <li class=\"nav-item\">\r\n                      <a class=\"nav-link\" href=\"#\">\r\n                        <i class=\"fa fa-bell\">\r\n                          <span class=\"badge badge-info\">0</span>\r\n                        </i>\r\n                        Notification\r\n                      </a>\r\n                    </li> */}\r\n                    <li class=\"nav-item\">\r\n                      <a class=\"nav-link\" href=\"#\">\r\n                        <i class=\"fa fa-user\"></i> Profile\r\n                      </a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                      <a class=\"nav-link\" href = \"#\" onClick = {_this.btnAdminLogout}>\r\n                        <i class=\"fa fa-cog\"></i> Logout\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </nav>\r\n            </div>\r\n          );\r\n    }\r\n\r\n    \r\n    btnAdminLogout(){      \r\n      // this.props.history.push(\"/login\");\r\n      // notification(\"success\", `<i class = \"fa fa-check\"></i> Successfully Logged Out..`)\r\n      // alert(this.state.isOpen)\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  validateToken: state.validateToken.testData\r\n})\r\nexport default connect(mapStateToProps, { validateToken })(NavbarComponent);\r\n","import axios from 'axios';\r\nimport { FETCH_SUBJECTS, NEW_SUBJECT, SUBJECT_INFO, SUBJECT_UPDATE, SUBJECT_DELETE } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\n\r\nexport function fetchSubjects(){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/subjects`, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data.result == \"success\"){\r\n                return dispatch(receiveData(FETCH_SUBJECTS, response.data))\r\n            }else if(response.data.result == \"failed\"){\r\n                return dispatch(receiveData(FETCH_SUBJECTS, response.data))\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return dispatch(receiveData(FETCH_SUBJECTS, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function newSubject(formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/subjects`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data.result == \"success\"){\r\n                return dispatch(receivePostsData(response.data))\r\n            }else if(response.data.result == \"failed\"){\r\n                return dispatch(receivePostsData(response.data))\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receivePostsData(error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function subjectInfo(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/subjects/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data.result == \"success\"){\r\n                return dispatch(receiveData(SUBJECT_INFO, response.data))\r\n            }else if(response.data.result == \"failed\"){\r\n                return dispatch(receiveData(SUBJECT_INFO, response.data))\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(SUBJECT_INFO, error))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function subjectUpdate(state, id, formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.put(`${BasePath}/subjects/${id}`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data){\r\n                if(response.data.result == \"success\"){\r\n                    return dispatch(receiveData(SUBJECT_UPDATE, response.data))\r\n                }else if(response.data.result == \"failed\"){\r\n                    return dispatch(receiveData(SUBJECT_UPDATE, response.data))\r\n                }\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(SUBJECT_UPDATE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function subjectDelete(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.delete(`${BasePath}/subjects/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data){\r\n                if(response.data.result == \"success\"){\r\n                    return dispatch(receiveData(SUBJECT_DELETE, response.data))\r\n                }else if(response.data.result == \"failed\"){\r\n                    return dispatch(receiveData(SUBJECT_DELETE, response.data))\r\n                }\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(SUBJECT_DELETE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport const receivePostsData = data => ({\r\n  type: NEW_SUBJECT,\r\n  payload: data\r\n})\r\n","import axios from 'axios';\r\nimport { ADMIN_UPLOAD_FILE, ADMIN_GET_FILE } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\n\r\nexport function uploadFile(fileData){\r\n\r\n    return function(dispatch){\r\n\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'content-type': 'multipart/form-data',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n                // Access-Control-Allow-Origin\r\n            }\r\n        }\r\n        const formData = new FormData();\r\n        formData.append('file',fileData)\r\n        return axios.post(`${BasePath}/uploads?type=subjects`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data){\r\n                let filename = response.data.filename;\r\n                let mimetype = response.data.mimetype;\r\n                // return dispatch(receiveData(ADMIN_UPLOAD_FILE, response.data))\r\n                return dispatch(receivePostsData(response.data))\r\n                // dispatch({type: VALIDATE_ADMIN, payload: auth})\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            console.log(\"ERROR UPLOAD==> \" + error)\r\n            let message = error.response.data.message;\r\n            let status = error.response.status;\r\n            return dispatch(receiveData(ADMIN_UPLOAD_FILE, {message, status}))\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getFile(fileName){\r\n    console.log(fileName)\r\n    return function(dispatch){\r\n\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token,\r\n                'Accept': 'image/jpeg',\r\n                'Content-Type': 'image/png'\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/uploads/${fileName}`, {responseType: 'blob', headers: {\r\n            'x-client-id': 'Jeyk',\r\n            'x-client-secret': 'Qwe12345',\r\n            'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n        }})\r\n        .then((response) => {\r\n            if(response.data){\r\n                var reader = new window.FileReader();\r\n                reader.readAsDataURL(response.data);\r\n                reader.onload = function() {\r\n                    var imageDataUrl = reader.result;\r\n                    return dispatch(receiveData(ADMIN_GET_FILE, imageDataUrl))\r\n                }\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(ADMIN_GET_FILE, error))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const receivePostsData = posts => ({\r\n  type: ADMIN_UPLOAD_FILE,\r\n  payload: posts\r\n})\r\n","import axios from 'axios';\r\nimport { FETCH_NEWS, NEWS_INFO, NEW_NEWS, NEWS_UPDATE, NEWS_DELETE } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\n\r\nexport function fetchNews(){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/news?pageItems=10000`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(FETCH_NEWS, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(FETCH_NEWS, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function newNews(formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/news`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(NEW_NEWS, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(NEW_NEWS, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function newsInfo(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/news/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(NEWS_INFO, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(NEWS_INFO, error))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function newsUpdate(state, id, formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.put(`${BasePath}/news/${id}`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data){\r\n                return dispatch(receiveData(NEWS_UPDATE, response.data))\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(NEWS_UPDATE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function newsDelete(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.delete(`${BasePath}/news/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data){\r\n                return dispatch(receiveData(NEWS_DELETE, response.data))\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(NEWS_DELETE, error))\r\n        })\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport { FETCH_USERS, NEW_USER, USER_INFO, USER_DELETE, USER_UPDATE } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\n\r\nexport function fetchUsers(){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/users?pageItems=1000`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(FETCH_USERS, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(FETCH_USERS, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function newUser(formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/auth/admin/register`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(NEW_USER, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(NEW_USER, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function userInfo(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/users/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            console.log(response.data)\r\n            return dispatch(receiveData(USER_INFO, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(USER_INFO, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function userUpdate(id, formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.put(`${BasePath}/users/${id}`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(USER_UPDATE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(USER_UPDATE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function userDelete(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.delete(`${BasePath}/users/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            if(response.data){\r\n                return dispatch(receiveData(USER_DELETE, response.data))\r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(USER_DELETE, error))\r\n        })\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport { FETCH_TOPICS, NEW_TOPIC, TOPIC_UPDATE, TOPIC_DELETE } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\n\r\nexport function fetchTopic(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/subjects/${id}/topics`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(FETCH_TOPICS, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(FETCH_TOPICS, error))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function newTopic(id, formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/subjects/${id}/topics`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(NEW_TOPIC, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(NEW_TOPIC, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function updateTopic(subjectId, topicId, formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.put(`${BasePath}/subjects/${subjectId}/topics/${topicId}`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(TOPIC_UPDATE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(TOPIC_UPDATE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function deleteTopic(subjectId, topicId){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.delete(`${BasePath}/subjects/${subjectId}/topics/${topicId}`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(TOPIC_DELETE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(TOPIC_DELETE, error))\r\n        })\r\n    }\r\n}","import axios from 'axios';\r\nimport { FETCH_QUESTIONS, CREATE_QUESTION, QUESTION_INFO, QUESTION_UPDATE, QUESTIONS_DELETE } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\n\r\nexport function fetchQuestions(subjectId, topicId){\r\n    var url;\r\n    if(topicId === \"\"){\r\n        url = `${BasePath}/questions?subjectId=${subjectId}`\r\n    }else{\r\n        url = `${BasePath}/questions?topicId=${topicId}&subjectId=${subjectId}`\r\n    }\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(url, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(FETCH_QUESTIONS, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(FETCH_QUESTIONS, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function newQuestion(formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/questions`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(CREATE_QUESTION, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(CREATE_QUESTION, error))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchQuestionInfo(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/questions/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(QUESTION_INFO, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(QUESTION_INFO, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function updateQuestion(id, formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.put(`${BasePath}/questions/${id}`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(QUESTION_UPDATE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(QUESTION_UPDATE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function deleteQuestion(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.delete(`${BasePath}/questions/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(QUESTIONS_DELETE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(QUESTIONS_DELETE, error))\r\n        })\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\nimport NavbarComponent   from '../__layout/Navbar';\r\nimport SideNavComponent   from '../__layout/SideNav';\r\nimport { validateToken } from '../../actions/module/validateAdminActions';\r\nimport { fetchSubjects } from '../../actions/module/subjectActions';\r\nimport { fetchTopic } from '../../actions/module/topicActions';\r\nimport { fetchLesson, fetchLessonInfo, newLesson, updateLesson } from '../../actions/module/lessonActions';\r\nimport { fetchQuestions, newQuestion } from '../../actions/module/questionsActions';\r\nimport { notification } from '../__plugins/noty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEdit, faTrash, faTrashAlt, faPlus, faTimes, faInfo } from '@fortawesome/free-solid-svg-icons';\r\n// import CKEditor from 'ckeditor4-react';\r\n// import CKEditor from '@ckeditor/ckeditor5-react';\r\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { Editor } from '@tinymce/tinymce-react'; \r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport Modal from '../__layout/Modal';\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\n\r\nclass LessonComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cardStatus: false,\r\n            cardActive: \"\",\r\n            isModalOpen: false,\r\n            subjectId: '',\r\n            subjectName: '',\r\n            topicId: '',\r\n            topicName: '',\r\n            lessonContent: '',\r\n            lessonName: '',\r\n            updateLessonContent: '',\r\n            updateLessonName: ''\r\n        }\r\n        this.showCard = this.showCard.bind(this);\r\n        this.formCreateLesson = this.formCreateLesson.bind(this);\r\n        this.formUpdateLesson = this.formUpdateLesson.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onChangeTopic = this.onChangeTopic.bind(this);\r\n        this.onChangeText = this.onChangeText.bind(this);\r\n        this.onEditorChange = this.onEditorChange.bind(this);\r\n        // this.onChangeFile = this.onChangeFile.bind(this);\r\n        // this.onEditorChange = this.onEditorChange.bind( this );\r\n    }\r\n    componentDidMount(){\r\n        if (localStorage.getItem(\"pinnacleAdmin\") !== null) {\r\n            this.props.validateToken(this.state).then(tokenValidate => {\r\n                if(tokenValidate.payload.status !== 200){\r\n                    this.props.history.push(\"/login\");\r\n                }else{\r\n                    this.props.fetchSubjects();\r\n                }\r\n            });\r\n        }else {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.lessonInfo){\r\n            this.setState({updateLessonName: nextProps.lessonInfo.data.name})\r\n            this.setState({updateLessonContent: nextProps.lessonInfo.data.content})\r\n        }\r\n    }\r\n\r\n    showCard(todo, status, lesson){\r\n        if(status == \"show\"){\r\n            this.setState({cardStatus: true})\r\n            this.setState({cardActive: todo})\r\n            if(todo == \"view\"){\r\n                this.props.fetchLessonInfo(lesson.topicId, lesson._id);\r\n                document.body.scrollTop = 0;\r\n                document.documentElement.scrollTop = 0;\r\n            }else if(todo == \"edit\"){\r\n                this.props.fetchLessonInfo(lesson.topicId, lesson._id);\r\n                document.body.scrollTop = 0;\r\n                document.documentElement.scrollTop = 0;\r\n            }\r\n        }else{\r\n            this.setState({cardStatus: false})\r\n        }\r\n    }\r\n\r\n    onChange(e){\r\n        let subject = JSON.parse(e.target.value);\r\n        this.setState({subjectId: subject.id})\r\n        this.setState({subjectName: subject.name})\r\n        this.props.fetchTopic(subject.id)\r\n        // if(e.target.value == \"\"){\r\n        // }else{\r\n        // }\r\n    }\r\n\r\n    onChangeText(e){\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    onChangeTopic(e){\r\n        // console.log(this.state.subjectId);\r\n        if(e.target.value == \"\"){\r\n            this.setState({topicId: \"\"})\r\n        }else{\r\n            let topic = JSON.parse(e.target.value);\r\n            this.setState({topicId: topic.id})\r\n            this.setState({topicName: topic.description})\r\n            this.props.fetchLesson(topic.id)\r\n        }\r\n    }\r\n\r\n    onEditorChange(evt) {\r\n        if(this.state.cardActive === 'create'){\r\n            // this.setState({ lessonContent: evt.editor.getData() });\r\n            this.setState({ lessonContent: evt.target.getContent() });\r\n        }else if(this.state.cardActive === 'edit'){\r\n            // this.setState({ updateLessonContent: evt.editor.getData() });\r\n            this.setState({ updateLessonContent: evt.target.getContent() });\r\n        }\r\n        \r\n    }\r\n\r\n    formCreateLesson(e){\r\n        e.preventDefault();\r\n        this.setState({disabled: true})\r\n        let formData = {\r\n            \"name\": this.state.lessonName,\r\n            \"content\": this.state.lessonContent\r\n        }\r\n        this.props.newLesson(this.state.topicId, formData).then(res => {\r\n            console.log(\"ADDED>>> \" + JSON.stringify(res))\r\n            if(res.payload.result === \"success\"){\r\n                notification(\"success\", `<i class = \"fa fa-check\"></i> ${res.payload.message}`)\r\n                this.props.fetchLesson(this.state.topicId)\r\n            }else if(res.payload.result === \"error\"){\r\n                notification(\"success\", `<i class = \"fa fa-check\"></i> ${res.payload.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-check\"></i> Something went wrong, Please try again`)\r\n            }\r\n            this.setState({lessonContent: \"\"});\r\n            this.setState({lessonName: \"\"});\r\n            this.setState({disabled: false})\r\n            this.setState({cardStatus: false})\r\n        });\r\n\r\n    }\r\n\r\n    formUpdateLesson(e){\r\n        e.preventDefault();\r\n        this.setState({disabled: true})\r\n        let formData = {\r\n            \"name\": this.state.updateLessonName,\r\n            \"content\": this.state.updateLessonContent\r\n        }\r\n        this.props.updateLesson(this.state.topicId, this.props.lessonInfo.data._id, formData).then(res => {\r\n            console.log(\"UPDATED>>> \" + JSON.stringify(res))\r\n            if(res.payload.result === \"success\"){\r\n                notification(\"success\", `<i class = \"fa fa-check\"></i> ${res.payload.message}`)\r\n                this.props.fetchLesson(this.state.topicId)\r\n\r\n            }else if(res.payload.result === \"error\"){\r\n                notification(\"success\", `<i class = \"fa fa-check\"></i> ${res.payload.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-check\"></i> Something went wrong, Please try again`)\r\n            }\r\n            this.setState({updateLessonContent: \"\"});\r\n            this.setState({updateLessonName: \"\"});\r\n            this.setState({disabled: false})\r\n            this.setState({cardStatus: false})\r\n        })\r\n    }\r\n\r\n    toggleState = (topicId, lessonId) => {\r\n        if (typeof topicId === 'undefined') {\r\n            this.setState({ isModalOpen: false});\r\n        }else{\r\n            this.props.fetchLessonInfo(topicId, lessonId);\r\n            this.setState({ isModalOpen: !this.state.isModalOpen});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let lessonListsArr = new Array();\r\n        let $this = this;\r\n        if(this.state.subjectId !== \"\" && this.state.topicId !== \"\" && this.props.lessonLists){\r\n            // $this.setState({cardStatus: true})\r\n            if(this.props.lessonLists.data){\r\n                if(this.props.lessonLists.data.length > 0){\r\n                    this.props.lessonLists.data.forEach( lesson => {\r\n                        lessonListsArr.push({\r\n                            name: lesson.name,\r\n                            action: <div className = \"\">\r\n                                        <button type=\"button\"  className=\"btn btn-primary btn-sm\" onClick={() =>  this.showCard('view', 'show', lesson)}> <FontAwesomeIcon icon = {faEye}/></button> &nbsp;\r\n                                        <button type=\"button\"  className=\"btn btn-success btn-sm\" onClick={() =>  this.showCard('edit', 'show', lesson)}> <FontAwesomeIcon icon = {faEdit}/></button> &nbsp;\r\n                                        <button type=\"button\"  className=\"btn btn-danger btn-sm\" onClick={() =>  this.toggleState(lesson.topicId, lesson._id)}> <FontAwesomeIcon icon = {faTrash}/></button>\r\n                                    </div>\r\n                        })\r\n                    });\r\n\r\n                }\r\n            }\r\n        }else{\r\n            lessonListsArr = [];\r\n        }\r\n        let columns = [\r\n            { dataField: 'name', text: 'Name',   style: { width: '600px' }, searchable: true},\r\n            { dataField: 'action', text: 'Action', style: { width: '200px' } }\r\n        ]\r\n        return (\r\n            <div>\r\n                <SideNavComponent/>\r\n                <div className=\"main\">\r\n                    <NavbarComponent/>\r\n                    <div className=\"container\">\r\n                        <div className = \"col\">\r\n                            <br/>\r\n                            <h2>Lessons</h2>\r\n                            <ol className=\"breadcrumb\">\r\n                                <li className=\"breadcrumb-item\"><a href=\"#\">Dashboard</a></li>\r\n                                <li className=\"breadcrumb-item\">Lessons</li>\r\n                            </ol>\r\n                            <div className = \"row\">\r\n                                { this.state.cardStatus == true ?\r\n                                    <div className = \"col-md-12\">\r\n                                        <div className=\"card card-custom-border\">\r\n                                            <div className=\"card-header\">\r\n                                                {this.state.cardActive == \"create\" ? \"Create new lesson\": \"\"}\r\n                                                {this.state.cardActive == \"edit\" ? \"Edit lesson\": \"\"}\r\n                                                {this.state.cardActive == \"view\" ? \"Lesson Information\" : \"\"}\r\n                                                <small className = \"float-right\">\r\n                                                    <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'hide')}>\r\n                                                        <FontAwesomeIcon icon = {faTimes}/> Close\r\n                                                    </a>\r\n                                                </small>\r\n                                            </div>\r\n                                            <div className=\"card-body\">\r\n                                                {this.state.cardActive == \"create\" ? \r\n                                                \r\n                                                    <form onSubmit = {this.formCreateLesson} id = \"createLessonForm\">\r\n                                                        <div className=\"form-group\">\r\n                                                            <p><b> {this.state.subjectName}</b></p>\r\n                                                            <p><b> {this.state.topicName}</b></p>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter lesson name\" name = \"lessonName\" value = {this.state.lessonName} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Content</label>\r\n                                                            {/* <CKEditor\r\n                                                                editor={ ClassicEditor }\r\n                                                                data=\"\"\r\n                                                                onChange={this.onEditorChange}\r\n                                                            /> */}\r\n                                                            <Editor\r\n                                                                initialValue=\"\"\r\n                                                                init={{\r\n                                                                height: 500,\r\n                                                                menubar: false,\r\n                                                                plugins: [\r\n                                                                    'font image underline',\r\n                                                                    'advlist autolink lists link image charmap print preview anchor',\r\n                                                                    'searchreplace visualblocks code fullscreen',\r\n                                                                    'insertdatetime media table paste code help wordcount'\r\n                                                                ],\r\n                                                                // plugins: [\r\n                                                                //     'lists link image paste help wordcount'\r\n                                                                // ],\r\n                                                                toolbar:\r\n                                                                    'font undo redo | formatselect | bold italic underline backcolor | \\\r\n                                                                    alignleft aligncenter alignright alignjustify | \\\r\n                                                                    bullist numlist outdent indent | removeformat image | help'\r\n                                                                }}\r\n                                                                onChange={this.onEditorChange}\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                            {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </form>\r\n                                                : \"\"}\r\n\r\n                                                {this.state.cardActive == \"edit\" ? \r\n                                                \r\n                                                <form onSubmit = {this.formUpdateLesson} id = \"editLessonForm\">\r\n                                                    <div className=\"form-group\">\r\n                                                        <p><b> {this.state.subjectName}</b></p>\r\n                                                        <p><b> {this.state.topicName}</b></p>\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter lesson name\" name = \"updateLessonName\" value = {this.state.updateLessonName} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"name\">Content</label>\r\n                                                        {/* <CKEditor\r\n                                                            editor={ ClassicEditor }\r\n                                                            data={this.state.updateLessonContent}\r\n                                                            onChange={this.onEditorChange}\r\n                                                        /> */}\r\n                                                         <Editor\r\n                                                            initialValue={this.state.updateLessonContent}\r\n                                                            init={{\r\n                                                            height: 500,\r\n                                                            menubar: false,\r\n                                                            plugins: [\r\n                                                                'font image underline',\r\n                                                                'advlist autolink lists link image charmap print preview anchor',\r\n                                                                'searchreplace visualblocks code fullscreen',\r\n                                                                'insertdatetime media table paste code help wordcount'\r\n                                                            ],\r\n                                                            // plugins: [\r\n                                                            //     'lists link image paste help wordcount'\r\n                                                            // ],\r\n                                                            toolbar:\r\n                                                                'font undo redo | formatselect | bold italic underline backcolor | \\\r\n                                                                alignleft aligncenter alignright alignjustify | \\\r\n                                                                bullist numlist outdent indent | removeformat image | help'\r\n                                                            }}\r\n                                                            onChange={this.onEditorChange}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                        {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </form>\r\n                                            : \"\"}\r\n\r\n                                                {this.state.cardActive == \"view\" ? \r\n                                                 <div>\r\n                                                     <p>Topic Name: <b>{this.state.topicName} </b></p>\r\n                                                     {this.props.lessonInfo ? \r\n                                                        <div>\r\n                                                            <p>Lesson Name: <b>{this.props.lessonInfo.data.name} </b></p>\r\n                                                            <p>Content: </p>\r\n                                                            <div class=\"alert alert-secondary alert-lesson-content\">\r\n                                                                <div dangerouslySetInnerHTML={{ __html: this.props.lessonInfo.data.content }} />\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        \r\n                                                     : \"\" }\r\n                                                     \r\n\r\n                                                </div>\r\n                                                : \"\" }\r\n                                            </div>\r\n                                        </div>\r\n                                        <hr/>\r\n                                    </div>\r\n                                : \"\" }\r\n                                \r\n\r\n                                <div className = \"col-md-12\">\r\n                                    <div className=\"card card-custom-border\">\r\n                                        <div className=\"card-header\">\r\n                                            Content box\r\n                                            <small className = \"float-right\">\r\n                                                {\r\n                                                    this.state.subjectId !== \"\" && this.state.topicId !== \"\" && this.props.topicLists  ?  <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'show', '')}><FontAwesomeIcon icon = {faPlus}/> Add new lesson</a> : \"\"\r\n                                                }\r\n                                            </small>\r\n                                        </div>\r\n                                        <div className=\"card-body\">\r\n                                            <div className = \"row\">\r\n                                                <div>\r\n                                                    {this.state.isModalOpen && (\r\n                                                    <Modal id=\"modal\" isOpen={this.state.isModalOpen} onClose={this.toggleState} title = \"Delete\" type = \"delete-lesson\" data = {this.props.lessonInfo ? this.props.lessonInfo.data : \"\"}>\r\n                                                        <div className=\"box-body\">Are you sure you want to delete this <b> {this.props.lessonInfo ? this.props.lessonInfo.data.name : \"\"} </b>?</div>\r\n                                                    </Modal>\r\n                                                    )}\r\n                                                </div>\r\n                                                <div className = \"col-md-6\">\r\n                                                    {this.props.subjectLists ? \r\n                                                        this.props.subjectLists.subjects.length > 0 \r\n                                                        ? \r\n                                                        <select className = \"form-control\" name = \"subjectId\" id = \"subjectId\" onChange = {this.onChange} > <option value = \"\">Select Subject</option>{ this.props.subjectLists.subjects.map(subj => <option value = {JSON.stringify(subj)} key = {subj.id} data-subject = {subj.name}>{subj.name}</option>) } </select> \r\n                                                        : \"\"\r\n                                                    : \r\n                                                    <div><i class=\"fa fa-spinner fa-spin\"></i> Loading subjects... </div>\r\n                                                    }\r\n                                                </div>\r\n                                                <div className = \"col-md-6\">\r\n                                                    {this.props.topicLists ? \r\n                                                        this.props.topicLists.length > 0 ? \r\n                                                            <div>\r\n                                                                <select className = \"form-control\" onChange = {this.onChangeTopic} > \r\n                                                                    <option value = \"\">Select Topic</option>\r\n                                                                    { this.props.topicLists.map(top => <option key = {top.id} value = {JSON.stringify(top)}>{top.description}</option>) } \r\n                                                                </select>\r\n                                                            </div>\r\n                                                        : <label className = \"text text-danger\">Topic currently empty</label>\r\n                                                    : \r\n                                                    \"\"\r\n                                                    }\r\n                                                </div>\r\n                                                <br/><br/>\r\n                                                <div class = \"container\">\r\n                                                    <div class=\" card\">\r\n                                                        <div class=\"card-body\">    \r\n                                                            {this.state.topicId == '' ? \r\n                                                                <div class=\"alert alert-dismissible alert-primary\">\r\n                                                                    <strong>Select subject and topic first</strong>\r\n                                                                </div>\r\n                                                            : \r\n                                                                            <ToolkitProvider\r\n                                                                            keyField=\"id\"\r\n                                                                            data={ lessonListsArr }\r\n                                                                            columns={ columns }\r\n                                                                            search\r\n                                                                            >\r\n                                                                            {\r\n                                                                                props => (\r\n                                                                                <div>\r\n                                                                                    <SearchBar { ...props.searchProps } />\r\n                                                                                    {/* <ClearSearchButton { ...props.searchProps } /> */}\r\n                                                                                    <hr />\r\n                                                                                    <BootstrapTable { ...props.baseProps } pagination={ paginationFactory() }/>\r\n                                                                                </div>\r\n                                                                                )\r\n                                                                            }\r\n                                                                            </ToolkitProvider>\r\n                                                            }\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    validateToken: state.validateToken.testData,\r\n    subjectLists: state.subjects.items.data,\r\n    topicLists: state.topics.items.data,\r\n    questionsLists: state.questions.items.data,\r\n    newQuestion: state.questions.question,\r\n    lessonLists: state.lessons.items,\r\n    lessonInfo: state.lessons.info\r\n})\r\n\r\nexport default connect(mapStateToProps, { \r\n    validateToken,\r\n    fetchSubjects, \r\n    fetchTopic,\r\n    fetchQuestions,\r\n    newQuestion,\r\n    fetchLesson,\r\n    fetchLessonInfo,\r\n    newLesson,\r\n    updateLesson\r\n})(LessonComponent);\r\n","\r\n\r\nimport axios from 'axios';\r\nimport { FETCH_SUBJECT_CODE, NEW_SUBJECT_CODE, SUBJECT_CODE_INFO, SUBJECT_CODE_UPDATE, RESEND_SUBJECT_CODE } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\nimport lesson from '../../components/lesson';\r\n\r\nexport function fetchSubjectCode(){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/admin/subjects/codes`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(FETCH_SUBJECT_CODE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(FETCH_SUBJECT_CODE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function fetchSubjectCodeInfo(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/admin/subjects/codes/${id}`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(SUBJECT_CODE_INFO, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(SUBJECT_CODE_INFO, error))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function newSubjectCode(formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/admin/subjects/codes/generate`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(NEW_SUBJECT_CODE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(NEW_SUBJECT_CODE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function updateSubjectCode(id, formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.put(`${BasePath}/admin/subjects/codes/${id}`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(SUBJECT_CODE_UPDATE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(SUBJECT_CODE_UPDATE, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function resendSubjectCode(formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/admin/subjects/codes/mail/resend`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(RESEND_SUBJECT_CODE, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(RESEND_SUBJECT_CODE, error))\r\n        })\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from 'react-redux';\r\nimport { validatePassword } from '../../actions/module/validateAdminActions';\r\nimport { subjectDelete, fetchSubjects } from '../../actions/module/subjectActions';\r\nimport { newsDelete, fetchNews } from '../../actions/module/newsActions';\r\nimport { fetchUsers, userDelete } from '../../actions/module/userActions';\r\nimport { fetchTopic, deleteTopic } from '../../actions/module/topicActions';\r\nimport { fetchLesson, deleteLesson } from '../../actions/module/lessonActions';\r\nimport { fetchQuestions, deleteQuestion } from '../../actions/module/questionsActions';\r\nimport { fetchSubjectCode, resendSubjectCode } from '../../actions/module/subjectCodeActions';\r\n\r\nimport { notification } from '../__plugins/noty';\r\n// styled\r\nimport StyledModal from \"./Modal.css\";\r\n\r\nconst modalRoot = document.getElementById(\"modal-root\");\r\n\r\nclass Modal extends Component {\r\n  static defaultProps = {\r\n    id: \"\",\r\n    modalClass: \"\",\r\n    modalSize: \"md\"\r\n  };\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state =  {\r\n      userPassword: '',\r\n      validate: false,\r\n      disabled: false,\r\n      showNotif: false\r\n    }\r\n    this.handleOperation = this.handleOperation.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.formValidatePassword = this.formValidatePassword.bind(this);\r\n  }\r\n\r\n  static propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    onClose: PropTypes.func.isRequired,\r\n    isOpen: PropTypes.bool.isRequired,\r\n    modalClass: PropTypes.string,\r\n    modalSize: PropTypes.string,\r\n    title: PropTypes.string,\r\n    type: PropTypes.string\r\n  };\r\n\r\n  state = { fadeType: null };\r\n\r\n  background = React.createRef();\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.onEscKeyDown, false);\r\n    setTimeout(() => this.setState({ fadeType: \"in\" }), 0);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (!this.props.isOpen && prevProps.isOpen) {\r\n      this.setState({ fadeType: \"out\" });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({validate: false});\r\n    this.setState({disabled: false});\r\n    this.setState({showNotif: false});\r\n    window.removeEventListener(\"keydown\", this.onEscKeyDown, false);\r\n  }\r\n\r\n  transitionEnd = e => {\r\n    if (e.propertyName !== \"opacity\" || this.state.fadeType === \"in\") return;\r\n\r\n    if (this.state.fadeType === \"out\") {\r\n      this.setState({validate: false});\r\n      this.setState({disabled: false});\r\n      this.setState({showNotif: false});\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  onEscKeyDown = e => {\r\n    if (e.key !== \"Escape\") return;\r\n    this.setState({validate: false});\r\n    this.setState({disabled: false});\r\n    this.setState({showNotif: false});\r\n    this.setState({ fadeType: \"out\" });\r\n  };\r\n\r\n  handleClick = e => {\r\n    e.preventDefault();\r\n    this.setState({validate: false});\r\n    this.setState({disabled: false});\r\n    this.setState({showNotif: false});\r\n    this.setState({ fadeType: \"out\" });\r\n  };\r\n\r\n  handleOperation = (e) => {\r\n    if(this.props.type === \"delete-subject\"){\r\n      let subject = this.props.data;\r\n      this.props.subjectDelete(subject.data.id).then(deletedSubj =>{\r\n        if(deletedSubj.payload.result === \"success\"){\r\n          this.setState({ fadeType: \"out\" });\r\n          notification(\"success\", `<i class = \"fa fa-check\"></i> ${deletedSubj.payload.message}`)\r\n        }else{\r\n            notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n        }\r\n        this.props.fetchSubjects();\r\n      });\r\n    }else if(this.props.type === \"delete-news\"){\r\n      let news = this.props.data;\r\n      this.props.newsDelete(news.data.id).then(deletedData => {\r\n            if(deletedData.payload.result === \"success\"){\r\n              this.props.fetchNews();\r\n              this.setState({ fadeType: \"out\" });\r\n              notification(\"success\", `<i class = \"fa fa-check\"></i> ${deletedData.payload.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n            }\r\n      })\r\n    }else if(this.props.type === \"delete-user\"){\r\n      let user = this.props.data;\r\n      this.props.userDelete(user.data.id).then(deletedData => {\r\n            if(deletedData.payload.result === \"success\"){\r\n              this.props.fetchUsers();\r\n              this.setState({ fadeType: \"out\" });\r\n              notification(\"success\", `<i class = \"fa fa-check\"></i> ${deletedData.payload.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n            }\r\n      })\r\n    }else if(this.props.type === \"delete-topic\"){\r\n      let topic = this.props.data;\r\n      console.log(topic)\r\n      this.props.deleteTopic(topic.subjectId, topic.topicId).then(deletedData => {\r\n            if(deletedData.payload.result === \"success\"){\r\n              this.props.fetchTopic(topic.subjectId);\r\n              this.setState({ fadeType: \"out\" });\r\n              notification(\"success\", `<i class = \"fa fa-check\"></i> ${deletedData.payload.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n            }\r\n      })\r\n    }else if(this.props.type === \"delete-lesson\"){\r\n      let lesson = this.props.data;\r\n      console.log(lesson)\r\n      this.props.deleteLesson(lesson.topicId, lesson._id).then(deletedData => {\r\n            if(deletedData.payload.result === \"success\"){\r\n              this.props.fetchLesson(lesson.topicId);\r\n              this.setState({ fadeType: \"out\" });\r\n              notification(\"success\", `<i class = \"fa fa-check\"></i> ${deletedData.payload.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n            }\r\n      })\r\n    }else if(this.props.type === \"delete-question\"){\r\n      let question = this.props.data;\r\n      console.log(question)\r\n      this.props.deleteQuestion(question._id).then(deletedData => {\r\n            if(deletedData.payload.result === \"success\"){\r\n              this.props.fetchQuestions(question.subjectId, question.topicId);\r\n              this.setState({ fadeType: \"out\" });\r\n              notification(\"success\", `<i class = \"fa fa-check\"></i> ${deletedData.payload.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n            }\r\n      })\r\n    }else if(this.props.type === \"resend-subject-code\"){\r\n      let subjectCodeInfo = this.props.data;\r\n      let formData = {\r\n        \"email\": subjectCodeInfo.data.email,\r\n        \"id\": subjectCodeInfo.data.id      \r\n      }\r\n      this.props.resendSubjectCode(formData).then(resendData => {\r\n        console.log(resendData)\r\n        if(resendData.payload.result === \"success\"){\r\n          this.props.fetchSubjectCode();\r\n          this.setState({ fadeType: \"out\" });\r\n          notification(\"success\", `<i class = \"fa fa-check\"></i> ${resendData.payload.message}`)\r\n        }else{\r\n            notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n        }\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    // if(nextProps.validate){\r\n    //   console.log(nextProps.validate)\r\n    //   if(nextProps.validate.result === \"success\"){\r\n    //     this.setState({validate: true})\r\n    //     this.setState({showNotif: false})\r\n        \r\n    //   }else{\r\n    //     this.setState({showNotif: true})\r\n    //     this.setState({disabled: false})\r\n    //     // this.setState({ fadeType: \"out\" });\r\n    //     // notification(\"error\", `<i class = \"fa fa-remove\"></i> Invalid Password.`)\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  onChange(e){\r\n    this.setState({[e.target.name]: e.target.value})\r\n  }\r\n\r\n  formValidatePassword(e){\r\n    e.preventDefault();\r\n    this.setState({disabled: true})\r\n    let form = {\r\n      password: this.state.userPassword\r\n    }\r\n    this.props.validatePassword(form).then(res => {\r\n      console.log(\"RESSS>> \" + JSON.stringify(res))\r\n      if(res.payload.result === \"success\"){\r\n        this.setState({validate: true})\r\n        this.setState({showNotif: false})\r\n      }else{\r\n        this.setState({showNotif: true})\r\n        this.setState({disabled: false})\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return ReactDom.createPortal(\r\n      <StyledModal\r\n        id={this.props.id}\r\n        className={`wrapper ${\"size-\" + this.props.modalSize} fade-${\r\n          this.state.fadeType\r\n        } ${this.props.modalClass}`}\r\n        role=\"dialog\"\r\n        modalSize={this.props.modalSize}\r\n        onTransitionEnd={this.transitionEnd}\r\n      >\r\n        <div className=\"box-dialog\">\r\n          <div className=\"box-header\">\r\n            <h5 className=\"box-title\">{this.props.title}</h5>\r\n            <button onClick={this.handleClick} className=\"close\">\r\n              ×\r\n            </button>\r\n          </div>\r\n          <div className=\"box-content\">{this.props.children}</div>\r\n          {this.props.type === \"resend-subject-code\" ? \"\" : \r\n            <div>\r\n              <hr/>\r\n              {this.state.validate === true \r\n                ? \r\n                  <div class = \"container\">\r\n                    <div class=\" alert alert-success\">\r\n                      <i className = \"fa fa-check\"></i> Password successfully validated, Click confirm to delete\r\n                    </div>\r\n                  </div>\r\n                : \r\n                <div className = \"container\">\r\n                  <div class=\" card\">\r\n                    <div class=\"card-body card-validate\">\r\n                      {this.state.showNotif === true ? <div class=\"alert alert-dismissible alert-danger\"> <i className = \"fa fa-info-circle\"></i> Invalid Password</div> : \"\"}\r\n                      <small><i>Enter password here in able to proceed in deletion</i></small>\r\n                      <form onSubmit = {this.formValidatePassword}>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"password\" className=\"form-control\" name = \"userPassword\" value = {this.state.userPassword} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                            {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"></div> : 'Submit'}\r\n                            </button>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div> \r\n              }\r\n              <br/> \r\n            </div>\r\n          }\r\n          \r\n          <div className=\"box-footer\">\r\n            {this.props.type === \"resend-subject-code\" ? <button onClick = {this.handleOperation} class=\"btn btn-outline-primary\">Confirm</button> : \"\"}\r\n            {this.state.validate === true ? <button onClick = {this.handleOperation} class=\"btn btn-outline-primary\">Confirm</button> : \"\"} &nbsp;\r\n            <button onClick={this.handleClick} className=\"btn btn-outline-danger\">Cancel</button>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={`background`}\r\n          onMouseDown={this.handleClick}\r\n          ref={this.background}\r\n        />\r\n      </StyledModal>,\r\n      modalRoot\r\n    );\r\n  }\r\n}\r\n\r\n\r\nModal.propTypes = {\r\n  subjectDelete: PropTypes.func.isRequired,\r\n  deleteSubjectProps: PropTypes.object\r\n};\r\nconst mapStateToProps = state => ({\r\n  validate: state.validateToken.validatePassword,\r\n  deleteSubjectProps: state.subjects.subjectDelete,\r\n  deleteNewsProps: state.news.newsUpdate,\r\n})\r\n\r\n\r\n// export default Modal;\r\nexport default connect(mapStateToProps, { \r\n  validatePassword,\r\n  subjectDelete,\r\n  newsDelete,\r\n  fetchNews,\r\n  fetchSubjects,\r\n  fetchUsers,\r\n  userDelete,\r\n  fetchTopic,\r\n  deleteTopic,\r\n  fetchLesson,\r\n  deleteLesson,\r\n  fetchQuestions,\r\n  deleteQuestion,\r\n  fetchSubjectCode,\r\n  resendSubjectCode\r\n})(Modal);","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\nimport NavbarComponent   from '../__layout/Navbar';\r\nimport SideNavComponent   from '../__layout/SideNav';\r\nimport { validateToken } from '../../actions/module/validateAdminActions';\r\nimport { fetchSubjects, subjectInfo, newSubject, subjectUpdate, subjectDelete } from '../../actions/module/subjectActions';\r\nimport { uploadFile, getFile } from '../../actions/module/uploadActions';\r\nimport { notification } from '../__plugins/noty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEdit, faTrash, faTrashAlt, faPlus, faTimes, faInfo } from '@fortawesome/free-solid-svg-icons';\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport Modal from '../__layout/Modal';\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\n\r\nclass SubjectComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"data\": \"\",\r\n            \"subjects\": [],\r\n            \"subject\": null,\r\n            \"subjectCode\": \"\",\r\n            \"subjectName\": \"\",\r\n            \"subjectDescription\": \"\",\r\n            \"subjectFileName\": \"\",\r\n            \"updateSubjectCode\": \"\",\r\n            \"updateSubjectName\": \"\",\r\n            \"updateSubjectDescription\": \"\",\r\n            \"updateLoad\": true,\r\n            \"subjectFileName\": \"\",\r\n            \"createSubject\": false,\r\n            \"cardStatus\": false,\r\n            \"cardActive\": \"\",\r\n            \"fileData\": \"\",\r\n            \"fileLoad\": false,\r\n            \"spinLoad\": false,\r\n            \"disabled\": false,\r\n            \"fileTargetValue\": null,\r\n            \"isModalOpen\": false,\r\n            \"deleteData\" : {}\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.formCreateSubject = this.formCreateSubject.bind(this);\r\n        this.formUpdateSubject = this.formUpdateSubject.bind(this);\r\n        this.onChangeFile = this.onChangeFile.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        if (localStorage.getItem(\"pinnacleAdmin\") !== null) {\r\n            this.props.validateToken(this.state).then(tokenValidate => {\r\n                if(tokenValidate.payload.status !== 200){\r\n                    this.props.history.push(\"/login\");\r\n                }else{\r\n                    this.props.fetchSubjects();\r\n                }\r\n            });\r\n        }else {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.fileUploaded){\r\n            // let fileName = nextProps.fileUploaded.file.filename\r\n            // this.setState({subjectFileName: fileName})\r\n        }\r\n        if(nextProps.getIcon){\r\n            // console.log(nextProps.getIcon)\r\n        }\r\n        if(nextProps.addedSubject){\r\n            this.setState({disabled: false});\r\n            this.setState({subjectCode: ''});\r\n            this.setState({subjectName: ''});\r\n            this.setState({subjectDescription: ''});\r\n            this.setState({subjectFileName: ''});\r\n            this.setState({fileTargetValue: null});\r\n            // this.state.fileTargetValue == null ? document.getElementById(\"fileSelect\").value = \"\" : \"\"\r\n            // this.props.lists.subjects.unshift({\r\n            //     code: nextProps.addedSubject.data.code,\r\n            //     name: nextProps.addedSubject.data.name,\r\n            //     action: <div className = \"\">\r\n            //                 <button type=\"button\"  className=\"btn btn-primary btn-sm\" onClick={() =>  this.showCard('view', 'show', nextProps.addedSubject.data._id)}> <FontAwesomeIcon icon = {faEye}/></button> &nbsp;\r\n            //                 <button type=\"button\"  className=\"btn btn-success btn-sm\" onClick={() =>  this.showCard('edit', 'show', nextProps.addedSubject.data._id)}> <FontAwesomeIcon icon = {faEdit}/></button> &nbsp;\r\n            //                 <button type=\"button\"  className=\"btn btn-danger btn-sm\" onClick={() =>  this.btnActionClick('delete', nextProps.addedSubject.data._id)}> <FontAwesomeIcon icon = {faTrash}/></button>\r\n            //             </div>\r\n            // })\r\n        }\r\n        if(nextProps.subjectInfoProps){\r\n            console.log(nextProps.subjectInfoProps)\r\n            this.setState({disabled: false});\r\n            this.setState({updateSubjectCode: nextProps.subjectInfoProps.data.code})\r\n            this.setState({updateSubjectName: nextProps.subjectInfoProps.data.name})\r\n            this.setState({updateSubjectDescription: nextProps.subjectInfoProps.data.description})\r\n            console.log(\".....>> \" + this.state.updateSubjectName);\r\n            if(nextProps.subjectInfoProps.data.imageUrl == \"\" || nextProps.subjectInfoProps.data.imageUrl == null){\r\n            }else{\r\n                this.props.getFile(nextProps.subjectInfoProps.data.imageUrl)\r\n            }\r\n        }\r\n        // if(nextProps.deleteSubjectProps){\r\n        //     console.log(nextProps.deleteSubjectProps)\r\n        //     if(nextProps.deleteSubjectProps.result === \"success\"){\r\n        //         var deleteData = this.props.lists.subjects;\r\n        //         deleteData.splice(nextProps.deleteSubjectProps.data._id, 1)\r\n        //         this.toggleState();\r\n        //         notification(\"success\", `<i class = \"fa fa-check\"></i> ${nextProps.deleteSubjectProps.message}`)\r\n        //     }else{\r\n        //         this.toggleState();\r\n        //         notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n        //     }\r\n        //     // this.setState({updateSubjectCode: ''});\r\n        //     // this.setState({updateSubjectName: ''});\r\n        //     // this.setState({updateSubjectDescription: ''});\r\n        //     // this.setState({subjectFileName: ''});\r\n        //     // this.setState({fileTargetValue: null});\r\n        // }\r\n    }\r\n    handleFileRead(fileeRead){\r\n        const content = fileeRead.result\r\n    }\r\n\r\n    render() {\r\n        let items = new Array();\r\n        if(this.props.lists){\r\n            this.props.lists.subjects.forEach( subj => {\r\n                items.push({\r\n                    code: subj.code,\r\n                    name: subj.name,\r\n                    action: <div className = \"\">\r\n                                <button type=\"button\"  className=\"btn btn-primary btn-sm\" onClick={() =>  this.showCard('view', 'show', subj.id)}> <FontAwesomeIcon icon = {faEye}/></button> &nbsp;\r\n                                <button type=\"button\"  className=\"btn btn-success btn-sm\" onClick={() =>  this.showCard('edit', 'show', subj.id)}> <FontAwesomeIcon icon = {faEdit}/></button> &nbsp;\r\n                                <button type=\"button\"  className=\"btn btn-danger btn-sm\" onClick={() =>  this.toggleState(subj.id)}> <FontAwesomeIcon icon = {faTrash}/></button>\r\n                            </div>\r\n                })\r\n            });\r\n        }\r\n          let columns = [\r\n            { dataField: 'code', text: 'Code', width: 1 },\r\n            { dataField: 'name', text: 'Name',   style: { width: '450px' }, searchable: true},\r\n            { dataField: 'action', text: 'Action', style: { width: '200px' } }\r\n        ]\r\n        var bTableOptions = {\r\n            clearSearch: true,\r\n            noDataText: (<i className=\"fa fa-circle-o-notch fa-spin\" style={{'fontSize': '24px'}}></i>)\r\n        };\r\n        return (\r\n            <div>\r\n\r\n                <SideNavComponent/>\r\n                <div className=\"main\">\r\n                    <NavbarComponent/>\r\n                        {/* <div className=\"\"> */}\r\n                    <div className=\"container\">\r\n                    <div className = \"col\">\r\n                    <br/>\r\n                    <h2>Subjects</h2>\r\n                    <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item\"><a href=\"#\">Dashboard</a></li>\r\n                        <li className=\"breadcrumb-item\">Subjects</li>\r\n                    </ol>\r\n                    <div className = \"row\">\r\n                        <div className = {this.state.cardStatus == true ? \"col-md-7\" : \"col\"}>\r\n                            <div className=\"card card-custom-border\">\r\n                                <div className=\"card-header\">\r\n                                    Content box\r\n                                    <small className = \"float-right\">\r\n                                        {\r\n                                            this.state.cardStatus == true ?  \"\" :  <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'show', '')}><FontAwesomeIcon icon = {faPlus}/> Add new subject</a>\r\n                                        }\r\n                                    </small>\r\n                                </div>\r\n                                <div className=\"card-body\">\r\n                                    \r\n                                    \r\n\r\n                                <div>\r\n                                    {this.state.isModalOpen && (\r\n                                    <Modal id=\"modal\" isOpen={this.state.isModalOpen} onClose={this.toggleState} title = \"Delete\" type = \"delete-subject\" data = {this.props.subjectInfoProps}>\r\n                                        <div className=\"box-body\">Are you sure you want to delete this <b> {this.state.updateSubjectName ? this.state.updateSubjectName : \"\"} </b>?</div>\r\n                                    </Modal>\r\n                                    )}\r\n                                </div>\r\n\r\n                                \r\n                                    <ToolkitProvider\r\n                                    keyField=\"id\"\r\n                                   \r\n                                    data={ items }\r\n                                    columns={ columns }\r\n                                    search\r\n                                    >\r\n                                    {\r\n                                        props => (\r\n                                        <div>\r\n                                            <SearchBar { ...props.searchProps } />\r\n                                            {/* <ClearSearchButton { ...props.searchProps } /> */}\r\n                                            <hr />\r\n                                            <BootstrapTable { ...props.baseProps } options = { bTableOptions } pagination={ paginationFactory() }/>\r\n                                        </div>\r\n                                        )\r\n                                    }\r\n                                    </ToolkitProvider>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        { this.state.cardStatus == true ?\r\n                            <div className = \"col-md-5\">\r\n                                <div className=\"card border-primary\">\r\n                                    <div className=\"card-header\">\r\n                                        {this.state.cardActive == \"view\" ? \"Subject Information\" : \"\"}\r\n                                        {this.state.cardActive == \"create\" ? \"Create new subject\": \"\"}\r\n                                        {this.state.cardActive == \"edit\" ? \"Edit subject\": \"\"}\r\n                                        <small className = \"float-right\">\r\n                                            <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'hide')}>\r\n                                                <FontAwesomeIcon icon = {faTimes}/> Close\r\n                                            </a>\r\n                                        </small>\r\n                                    </div>\r\n                                    <div className=\"card-body\">\r\n                                        {this.state.cardActive == \"create\" ?\r\n                                            <form onSubmit = {this.formCreateSubject} id = \"createSubjectForm\">\r\n                                            <div className=\"form-group\">\r\n                                                <label for=\"name\">Subject Name</label>\r\n                                                <input type=\"text\" className=\"form-control\" placeholder=\"Enter subject name\" name = \"subjectName\" value = {this.state.subjectName} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label for=\"code\">Subject Code</label>\r\n                                                <input type=\"text\" className=\"form-control\" placeholder=\"Enter subject code\" name = \"subjectCode\"  value = {this.state.subjectCode} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label for=\"description\">Description </label>\r\n                                                <textarea placeholder = \"Enter description\" className=\"form-control\" name = \"subjectDescription\" value = {this.state.subjectDescription} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label for=\"icon\">Icon</label>\r\n                                                <input type=\"file\" name=\"file\" id = \"fileSelect\" className=\"form-control-file\" onChange={this.onChangeFile} disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                {this.state.fileLoad == true ? <img src = {this.state.fileData} className = \"img-thumb center\"/> : \"\"}\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                  {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                </button>\r\n                                            </div>\r\n                                            </form>\r\n                                        : \"\"}\r\n                                        \r\n                                        {this.state.cardActive == \"view\" ?\r\n                                            <div>\r\n                                                { this.props.subjectInfoProps ? \r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-md-12 post\">\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"col-md-12\">\r\n                                                                    <h5><strong className = \"subject-title\">{this.props.subjectInfoProps.data.name}</strong></h5>\r\n                                                                    <h6>Code: <small>{this.props.subjectInfoProps.data.code}HHH</small></h6>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"col\">\r\n                                                                    <p>{this.props.subjectInfoProps.data.description}</p>\r\n                                                                    <div className = \" d-flex align-items-center flex-column\"> \r\n                                                                        {this.props.subjectInfoProps.data.imageUrl ? \r\n                                                                            <div>\r\n                                                                                {this.props.getIcon \r\n                                                                                ? \r\n                                                                                    <img src = {this.props.getIcon} className = \"img-thumb\"/> \r\n                                                                                : \r\n                                                                                    <div className=\"spinner-border text-default\" role=\"status\"></div>\r\n                                                                                } \r\n                                                                            </div>\r\n                                                                        : <div className = \"d-flex align-items-center flex-column\"><span className=\"badge badge-warning\">No icon uploaded for this content</span></div>\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                :  \r\n                                                <div className = \"d-flex align-items-center flex-column\">\r\n                                                    <div className=\"spinner-border text-primary\" role=\"status\"></div>\r\n                                                </div>\r\n                                                }\r\n                                            </div>\r\n\r\n                                        : \"\"}\r\n\r\n\r\n                                        {this.state.cardActive == \"edit\" ?\r\n                                            <div>\r\n                                                { this.props.subjectInfoProps ? \r\n\r\n                                                    <form onSubmit = {this.formUpdateSubject} id = \"updateSubjectForm\">\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Subject Name</label>\r\n                                                            <input \r\n                                                                type=\"text\" \r\n                                                                className=\"form-control\" \r\n                                                                placeholder=\"Enter subject name\" \r\n                                                                name = \"updateSubjectName\" \r\n                                                                value = {this.state.updateSubjectName} \r\n                                                                onChange = {this.onChange} \r\n                                                                required\r\n                                                                disabled = {(this.state.disabled)? \"disabled\" : \"\"}\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"code\">Subject Code</label>\r\n                                                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter subject code\" name = \"updateSubjectCode\"  value = {this.state.updateSubjectCode} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"description\">Description </label>\r\n                                                            <textarea placeholder = \"Enter description\" className=\"form-control\" name = \"updateSubjectDescription\" value = {this.state.updateSubjectDescription} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"icon\">Update Icon</label>\r\n                                                            <input type=\"file\" name=\"file\" id = \"fileSelect\" className=\"form-control-file\" onChange={this.onChangeFile} disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <hr/>\r\n                                                        {this.state.updateLoad == false ? \r\n                                                            this.props.subjectInfoProps.data.imageUrl ? \r\n                                                                <div className = \"d-flex align-items-center flex-column\">\r\n                                                                    {this.props.getIcon \r\n                                                                    ? \r\n                                                                        <div><b>Current icon:</b> <img src = {this.props.getIcon} className = \"img-thumb\"/> </div>\r\n                                                                    : \r\n                                                                        <div className=\"spinner-border text-default\" role=\"status\"></div>\r\n                                                                    } \r\n                                                                </div>\r\n                                                            : <div className = \"d-flex align-items-center flex-column\"><span className=\"badge badge-warning\">No icon uploaded</span></div>\r\n                                                        : \"\"}\r\n                                                        \r\n                                                        <hr/>\r\n                                                        <div className=\"form-group\">\r\n                                                            <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                            {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Update'}\r\n                                                            </button>\r\n                                                        </div>\r\n                                                        </form>\r\n                                                :  \r\n                                                <div className = \"d-flex align-items-center flex-column\">\r\n                                                    <div className=\"spinner-border text-primary\" role=\"status\"></div>\r\n                                                </div>\r\n                                                }\r\n                                            </div>\r\n\r\n                                        : \"\"}\r\n\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        : \"\"}\r\n                    </div>\r\n\r\n                    </div>\r\n\r\n\r\n                    </div>\r\n                    {/* </div> */}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    toggleState = (id) => {\r\n        // alert(window.location.href)\r\n        if (typeof id === 'undefined') {\r\n            this.setState({ isModalOpen: false});\r\n        }else{\r\n            this.props.subjectInfo(id);\r\n            this.setState({ isModalOpen: !this.state.isModalOpen});\r\n        }\r\n    };\r\n    formCreateSubject(e){\r\n        e.preventDefault();\r\n        let subjectName = this.state.subjectName;\r\n        let subjectCode = this.state.subjectCode;\r\n        let subjectDescription = this.state.subjectDescription;\r\n        let subjectFileName = this.state.subjectFileName;\r\n        if(this.state.fileTargetValue == null){\r\n              notification(\"error\", `<i class = \"fa fa-info-circle\"></i> Upload subject icon first`)\r\n        }else{\r\n          this.setState( {disabled: !this.state.disabled} )\r\n          this.props.uploadFile(this.state.fileTargetValue).then(data => {\r\n              \r\n            if('file' in data.payload){\r\n                let form = {\r\n                \"name\":  subjectName,\r\n                \"code\": subjectCode,\r\n                \"description\": subjectDescription,\r\n                \"imageUrl\": data.payload.file.filename\r\n                }\r\n                this.props.newSubject(form);\r\n                notification(\"success\", `<i class = \"fa fa-info-circle\"></i> Successfully added new subject`)\r\n            }else{\r\n                this.setState({disabled: false});\r\n                notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${data.payload.message}`)\r\n            }\r\n            this.props.fetchSubjects();\r\n          });\r\n        }\r\n    }\r\n\r\n    formUpdateSubject(e){\r\n        e.preventDefault();\r\n        this.setState({disabled: true});\r\n        this.setState({updateLoad:  false})\r\n        let file = this.state.fileTargetValue;\r\n        let form = {\r\n            code: this.state.updateSubjectCode,\r\n            name: this.state.updateSubjectName,\r\n            description: this.state.updateSubjectDescription,\r\n            imageUrl: this.props.subjectInfoProps.data.imageUrl,\r\n            isArchive: false\r\n        };\r\n        if(file == null || file == \"\"){\r\n            this.props.subjectUpdate(this.state, this.props.subjectInfoProps.data.id, form).then(sub => {\r\n                let response = sub.payload.data;\r\n                this.props.lists.subjects.forEach( subj => {\r\n                    if(subj.id == response._id){\r\n                        subj.name=response.name\r\n                        subj.code=response.code\r\n                    }\r\n                });\r\n                this.setState({updateSubjectCode: ''});\r\n                this.setState({updateSubjectName: ''});\r\n                this.setState({updateSubjectDescription: ''});\r\n                this.setState({subjectFileName: ''});\r\n                this.setState({fileTargetValue: null});\r\n                \r\n\r\n                this.setState({disabled: false});\r\n                notification(\"success\", `<i class = \"fa fa-check\"></i> ${sub.payload.message}`);\r\n            });\r\n        }else{\r\n            this.props.uploadFile(file).then(data => {\r\n                if('file' in data.payload){\r\n                    form.imageUrl = data.payload.file.filename;\r\n                    this.props.subjectUpdate(this.state, this.props.subjectInfoProps.data.id, form).then(sub => {\r\n                        let response = sub.payload.data;\r\n                        this.props.lists.subjects.forEach( subj => {\r\n                            if(subj.id == response._id){\r\n                                subj.name=response.name\r\n                                subj.code=response.code\r\n                            }\r\n                        });\r\n                        this.setState({updateSubjectCode: ''});\r\n                        this.setState({updateSubjectName: ''});\r\n                        this.setState({updateSubjectDescription: ''});\r\n                        this.setState({subjectFileName: ''});\r\n                        this.setState({fileTargetValue: null});\r\n                        // this.state.fileTargetValue == null ? document.getElementById(\"fileSelect\").value = \"\" : \"\"\r\n                        \r\n                        \r\n                        this.setState({disabled: false});\r\n                        \r\n                        notification(\"success\", `<i class = \"fa fa-check\"></i> ${sub.payload.message}`);\r\n                    });\r\n                }else{\r\n                  this.setState({disabled: false});\r\n                  notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${data.payload.message}`)\r\n              }     \r\n            });\r\n        }\r\n        this.setState({updateLoad:  true})\r\n        \r\n        // if(file == null){\r\n            // console.log(\">>>>>>>>> \" + JSON.stringify(form))\r\n            // this.props.subjectUpdate(this.props.subjectInfoProps.id, form);\r\n            // this.props.subjectUpdate(this.state, this.props.subjectInfoProps.data.id, form).then(sub => {\r\n            //     console.log(\"hays.>> \" + JSON.stringify(sub))\r\n            //     if(sub.payload.result == \"success\"){\r\n            //         console.log(\"AASAS\")\r\n            //         this.props.lists.subjects.forEach( subj => {\r\n            //             if(subj.id == sub.payload.data._id){\r\n            //                 subj.name=sub.details.name\r\n            //                 subj.code=sub.details.code\r\n            //             }\r\n            //         });\r\n            //         this.setState({disabled: false});\r\n            //         this.setState({updateSubjectCode: ''});\r\n            //         this.setState({updateSubjectName: ''});\r\n            //         this.setState({updateSubjectDescription: ''});\r\n            //         this.setState({subjectFileName: ''});\r\n            //         this.setState({fileTargetValue: null});\r\n            //         notification(\"success\", `<i class = \"fa fa-check\"></i> ${sub.message}`);\r\n            //     }else if(sub.payload.result == \"failed\"){\r\n            //         notification(\"success\", `<i class = \"fa fa-check\"></i> ${sub.message}`);\r\n            //     }\r\n            // });\r\n        // }else{\r\n            // this.props.uploadFile(file).then(data => {\r\n            //     if('file' in data.payload){\r\n            //         form.imageUrl = data.payload.file.filename;\r\n            //         this.props.subjectUpdate(this.props.subjectInfoProps.id, form);\r\n            //   }else{\r\n            //       this.setState({disabled: false});\r\n            //       notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${data.payload.message}`)\r\n            //   }\r\n                    \r\n            // });\r\n        // }\r\n        // console.log(file)\r\n    }\r\n\r\n    showCard(todo, status, id){\r\n        if(status == \"show\"){\r\n            this.setState({cardStatus: true})\r\n            this.setState({cardActive: todo})\r\n            if(todo == \"view\"){\r\n                this.setState({disabled: true});\r\n                this.props.subjectInfo(id);\r\n            }else if(todo == \"edit\"){\r\n                this.setState({disabled: true});\r\n                this.setState({updateLoad: false});\r\n                this.props.subjectInfo(id);\r\n            }\r\n        }else{\r\n            this.setState({cardStatus: false})\r\n        }\r\n    }\r\n\r\n    btnActionClick(mode, row){\r\n        console.log(mode + ' - ' + row.id);\r\n    }\r\n\r\n    onChange(e){\r\n        // console.log(e.target.name + \" : \" + e.target.value)\r\n        this.setState({[e.target.name]: e.target.value})\r\n        // console.log(this.state.updateSubjectCode)\r\n    }\r\n\r\n    onChangeFile(event){\r\n      let file = event.target.files[0];\r\n      if(file == null || file == \"\"){\r\n      }else{\r\n        this.setState({fileTargetValue: file})\r\n      }\r\n    }\r\n}\r\n\r\nSubjectComponent.propTypes = {\r\n    fetchSubjects: PropTypes.func.isRequired,\r\n    newSubject: PropTypes.func.isRequired,\r\n    subjectUpdate: PropTypes.func.isRequired,\r\n    subjectDelete: PropTypes.func.isRequired,\r\n    uploadFile: PropTypes.func.isRequired,\r\n    getFile: PropTypes.func.isRequired,\r\n    subjects:  PropTypes.array.isRequired,\r\n    fileUploaded: PropTypes.object,\r\n    subjectInfo: PropTypes.func.isRequired,\r\n    subjectInfoProps: PropTypes.object,\r\n    addedSubject: PropTypes.object,\r\n    updateSubject: PropTypes.object,\r\n    deleteSubjectProps: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    validateToken: state.validateToken.testData,\r\n    lists: state.subjects.items.data,\r\n    addedSubject: state.subjects.subject,\r\n    fileUploaded: state.file.data,\r\n    getIcon: state.file.image,\r\n    subjectInfoProps: state.subjects.subjectInfo,\r\n    updateSubjectProps: state.subjects.subjectUpdate,\r\n    deleteSubjectProps: state.subjects.subjectDelete\r\n})\r\n\r\nexport default connect(mapStateToProps, { \r\n    validateToken, \r\n    fetchSubjects, \r\n    uploadFile, \r\n    getFile, \r\n    subjectInfo, \r\n    newSubject, \r\n    subjectUpdate,\r\n    subjectDelete \r\n})(SubjectComponent);","import axios from 'axios';\r\nimport { ADMIN_LOGIN } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser, headerAdminUser } from '../env';\r\n\r\nexport function loginPost(postData){\r\n    \r\n    return function(dispatch){\r\n        return axios.post(`${BasePath}/auth/admin/login`, postData, headerNonUser)\r\n        .then((response) => {\r\n            if(response.data){\r\n                let token = response.data.token\r\n                let expiresIn = response.data.expiresIn\r\n                let user = response.data.user\r\n                let status = response.status\r\n                dispatch(receiveData(ADMIN_LOGIN, {token, expiresIn, user, status}))\r\n            }\r\n            \r\n        })\r\n        .catch(function (error) {\r\n            // if (error.response) {\r\n            //     console.log(error.response.data);\r\n            //     console.log(error.response.status);\r\n            //     console.log(error.response.headers);\r\n            // }\r\n            let message = error.response.data.message;\r\n            let status = error.response.status;\r\n            dispatch(receiveData(ADMIN_LOGIN, {message, status}))\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\nimport NavbarComponent   from '../__layout/Navbar';\r\nimport SideNavComponent   from '../__layout/SideNav';\r\nimport { validateToken } from '../../actions/module/validateAdminActions';\r\nimport { fetchSubjects } from '../../actions/module/subjectActions';\r\nimport { fetchTopic, newTopic, updateTopic } from '../../actions/module/topicActions';\r\n\r\nimport { uploadFile, getFile } from '../../actions/module/uploadActions';\r\nimport { notification } from '../__plugins/noty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEdit, faTrash, faTrashAlt, faPlus, faTimes, faInfo } from '@fortawesome/free-solid-svg-icons';\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport Modal from '../__layout/Modal';\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\n\r\nclass TopicComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"subjectName\": \"\",\r\n            \"subjectId\": \"\",\r\n            \"cardStatus\": false,\r\n            \"disabled\": false,\r\n            \"isModalOpen\": false,\r\n            \"createTopicName\": \"\",\r\n            \"editTopicName\": \"\",\r\n            \"topicId\": \"\",\r\n            \"topicName\": \"\",\r\n            \"topicInfo\": \"\"\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onChangeForm = this.onChangeForm.bind(this);\r\n        this.formCreateTopic = this.formCreateTopic.bind(this);\r\n        this.formUpdateTopic = this.formUpdateTopic.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        if (localStorage.getItem(\"pinnacleAdmin\") !== null) {\r\n            this.props.validateToken(this.state).then(tokenValidate => {\r\n                if(tokenValidate.payload.status !== 200){\r\n                    this.props.history.push(\"/login\");\r\n                }else{\r\n                    this.props.fetchSubjects();\r\n                }\r\n            });\r\n        }else {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    showCard(todo, status, id){\r\n        if(status == \"show\"){\r\n            this.setState({cardStatus: true})\r\n            this.setState({cardActive: todo})\r\n            if(todo == \"view\"){\r\n                this.setState({disabled: true});\r\n                // this.props.subjectInfo(id);\r\n            }else if(todo == \"edit\"){\r\n                this.setState({disabled: false});\r\n                this.setState({topicId: id.id});\r\n                this.setState({editTopicName: id.description});\r\n                this.setState({updateLoad: false});\r\n                // this.props.subjectInfo(id);\r\n            }\r\n        }else{\r\n            this.setState({cardStatus: false})\r\n        }\r\n    }\r\n\r\n    onChange(e){\r\n        if(e.target.value == \"\"){\r\n            this.setState({subjectId: \"\"})\r\n        }else{\r\n            let subject = JSON.parse(e.target.value);\r\n            this.setState({subjectId: subject.id})\r\n            this.setState({subjectName: subject.name})\r\n            this.props.fetchTopic(subject.id)\r\n        }\r\n    }\r\n\r\n    onChangeForm(e){\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    formCreateTopic(e){\r\n        e.preventDefault();\r\n        if(this.state.subjectId === \"\"){\r\n            notification(\"error\", `<i class = \"fa fa-remove\"></i> Select subject first`)\r\n        }else{\r\n            this.setState({disabled: true})\r\n            let formData = {\r\n                \"description\": this.state.createTopicName\r\n            }\r\n            this.props.newTopic(this.state.subjectId, formData).then( data => {\r\n                console.log(\"AAA> \" + JSON.stringify(data))\r\n                this.setState({disabled: false})\r\n                this.setState({createTopicName: ''})\r\n                if(data.payload.result === \"success\"){\r\n                    this.props.fetchTopic(this.state.subjectId);\r\n                    notification(\"success\", `<i class = \"fa fa-check\"></i> ${data.payload.message}`)\r\n                }else if(data.payload.result === \"failed\"){\r\n                    notification(\"error\", `<i class = \"fa fa-remove\"></i> ${data.payload.message}`)\r\n                }else{\r\n                    notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    formUpdateTopic(e){\r\n        e.preventDefault();\r\n        if(this.state.subjectId === \"\"){\r\n            notification(\"error\", `<i class = \"fa fa-remove\"></i> Select subject first`)\r\n        }else{\r\n            this.setState({disabled: true})\r\n            let formData = {\r\n                \"description\": this.state.editTopicName,\r\n                \"subjectId\": this.state.subjectId,\r\n                \"isArchive\": false\r\n            }\r\n            this.props.updateTopic(this.state.subjectId, this.state.topicId, formData).then( data => {\r\n                console.log(\"AAA> \" + JSON.stringify(data))\r\n                this.setState({disabled: false})\r\n                this.setState({editTopicName: ''})\r\n                if(data.payload.result === \"success\"){\r\n                    this.props.fetchTopic(this.state.subjectId);\r\n                    notification(\"success\", `<i class = \"fa fa-check\"></i> ${data.payload.message}`)\r\n                }else if(data.payload.result === \"failed\"){\r\n                    notification(\"error\", `<i class = \"fa fa-remove\"></i> ${data.payload.message}`)\r\n                }else{\r\n                    notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleState = (topic) => {\r\n        // alert(window.location.href)\r\n        console.log(topic)\r\n        if (typeof topic === 'undefined') {\r\n            this.setState({ isModalOpen: false});\r\n        }else{\r\n            this.setState({topicInfo: {\"subjectId\": this.state.subjectId, \"topicId\": topic.id, \"topicName\": topic.description}})\r\n            console.log(this.state.topicInfo)\r\n            this.setState({ isModalOpen: !this.state.isModalOpen});\r\n        }\r\n    };\r\n\r\n    \r\n    render() {\r\n        let topicsListsArr = new Array();\r\n        if(this.props.topicLists){\r\n            if(this.props.topicLists.length > 0){\r\n                this.props.topicLists.forEach( topic => {\r\n                    topicsListsArr.push({\r\n                        name: topic.description,\r\n                        totalLessons: topic.lessons.length,\r\n                        action: <div className = \"\">\r\n                                    {/* <button type=\"button\"  className=\"btn btn-primary btn-sm\" onClick={() =>  this.showCard('view', 'show', topic.id)}> <FontAwesomeIcon icon = {faEye}/></button> &nbsp; */}\r\n                                    <button type=\"button\"  className=\"btn btn-success btn-sm\" onClick={() =>  this.showCard('edit', 'show', topic)}> <FontAwesomeIcon icon = {faEdit}/></button> &nbsp;\r\n                                    <button type=\"button\"  className=\"btn btn-danger btn-sm\" onClick={() =>  this.toggleState(topic)}> <FontAwesomeIcon icon = {faTrash}/></button>\r\n                                </div>\r\n                    })\r\n                });\r\n            }\r\n        }\r\n        let columns = [\r\n            { dataField: 'name', text: 'Name', style: { width: '450px' }},\r\n            { dataField: 'totalLessons', text: 'Total Lessons', style: { width: '350px' }},\r\n            { dataField: 'action', text: 'Action', style: { width: '200px' } }\r\n        ]\r\n        \r\n        return (\r\n            <div>\r\n            <SideNavComponent/>\r\n                <div className=\"main\">\r\n                    <NavbarComponent/>\r\n                        {/* <div className=\"\"> */}\r\n                    <div className=\"container\">\r\n                        <div className = \"col\">\r\n                        <br/>\r\n                        <h2>Topics</h2>\r\n                        <ol className=\"breadcrumb\">\r\n                            <li className=\"breadcrumb-item\"><a href=\"#\">Dashboard</a></li>\r\n                            <li className=\"breadcrumb-item\">Topics</li>\r\n                        </ol>\r\n                        <div className = \"row\">\r\n                            <div className = {this.state.cardStatus == true ? \"col-md-7\" : \"col\"}>\r\n                                <div className=\"card card-custom-border\">\r\n                                    <div className=\"card-header\">\r\n                                        Content box\r\n                                        <small className = \"float-right\">\r\n                                            {\r\n                                                this.state.cardStatus == true ?  \"\" :  this.state.subjectId === \"\" ? \"\" : <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'show', '')}><FontAwesomeIcon icon = {faPlus}/> Add new topic</a>\r\n                                            }\r\n                                        </small>\r\n                                    </div>\r\n                                    <div className=\"card-body\">\r\n                                        \r\n                                        \r\n                                        \r\n                                    {/* <div>\r\n                                        {this.state.isModalOpen && (\r\n                                        <Modal id=\"modal\" isOpen={this.state.isModalOpen} onClose={this.toggleState} title = \"Delete\" type = \"delete-topic\" data = {this.state.topicInfo}>\r\n                                            <div className=\"box-body\">Are you sure you want to delete this <b> {this.state.topicInfo ? this.state.topicInfo.topicName : \"\"} </b>?</div>\r\n                                        </Modal>\r\n                                        )}\r\n                                    </div> */}\r\n\r\n                                    <div className = \"col-md-12\">\r\n                                        <div>\r\n                                            {this.state.isModalOpen && (\r\n                                                <Modal id=\"modal\" isOpen={this.state.isModalOpen} onClose={this.toggleState} title = \"Delete\" type = \"delete-question\" data = {this.props.questionInfo ? this.props.questionInfo.data : \"\"}>\r\n                                                    <div className=\"box-body\">Are you sure you want to delete this <b> {this.state.questionInfo ? this.state.questionInfo.data.tag : \"\"} </b>?</div>\r\n                                                </Modal>\r\n                                                )}\r\n                                        </div>\r\n                                        {this.props.subjectLists ? \r\n                                            this.props.subjectLists.subjects.length > 0 \r\n                                            ? \r\n                                            <select className = \"form-control\" name = \"subjectId\" id = \"subjectId\" onChange = {this.onChange} > <option value = \"\">Select Subject</option>{ this.props.subjectLists.subjects.map(subj => <option value = {JSON.stringify(subj)} key = {subj.id} data-subject = {subj.name}>{subj.name}</option>) } </select> \r\n                                            : \"\"\r\n                                        : \r\n                                        <div><i class=\"fa fa-spinner fa-spin\"></i> Loading subjects... </div>\r\n                                        }\r\n                                    </div>\r\n                                    <br/>\r\n                                        <div class = \"container\">\r\n                                            <div class=\" card\">\r\n                                                <div class=\"card-body\">    \r\n                                                    {this.state.subjectId == '' ? \r\n                                                        <div class=\"alert alert-dismissible alert-primary\">\r\n                                                            <strong>Select Subject first</strong>\r\n                                                        </div>\r\n                                                    :  \r\n                                                    <ToolkitProvider\r\n                                                    keyField=\"id\"\r\n                                                    data={ topicsListsArr }\r\n                                                    columns={ columns }\r\n                                                    search\r\n                                                    >\r\n                                                    {\r\n                                                        props => (\r\n                                                        <div>\r\n                                                            <SearchBar { ...props.searchProps } />\r\n                                                            <hr />\r\n                                                            <BootstrapTable { ...props.baseProps } pagination={ paginationFactory() }/>\r\n                                                        </div>\r\n                                                        )\r\n                                                    }\r\n                                                    </ToolkitProvider>\r\n                                                    }\r\n                                                    \r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n                            { this.state.cardStatus == true ?\r\n                                <div className = \"col-md-5\">\r\n                                    <div className=\"card border-primary\">\r\n                                        <div className=\"card-header\">\r\n                                            {this.state.cardActive == \"view\" ? \"Topic Information\" : \"\"}\r\n                                            {this.state.cardActive == \"create\" ? \"Create new topic\": \"\"}\r\n                                            {this.state.cardActive == \"edit\" ? \"Edit topic\": \"\"}\r\n                                            <small className = \"float-right\">\r\n                                                <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'hide')}>\r\n                                                    <FontAwesomeIcon icon = {faTimes}/> Close\r\n                                                </a>\r\n                                            </small>\r\n                                        </div>\r\n                                        <div className=\"card-body\">\r\n                                            {this.state.cardActive == \"create\" ?\r\n                                                <form onSubmit = {this.formCreateTopic} id = \"createTopicForm\">\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\"><b>{this.state.subjectName}</b></label>\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">Name</label>\r\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter topic name\" name = \"createTopicName\"  value = {this.state.createTopicName} onChange = {this.onChangeForm} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"form-group\">\r\n                                                        <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                        {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </form>\r\n                                            : \"\"}\r\n\r\n                                            {this.state.cardActive == \"edit\" ?\r\n                                                <form onSubmit = {this.formUpdateTopic} id = \"editTopicForm\">\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\"><b>{this.state.subjectName}</b></label>\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">Name</label>\r\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter topic name\" name = \"editTopicName\"  value = {this.state.editTopicName} onChange = {this.onChangeForm} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"form-group\">\r\n                                                        <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                        {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </form>\r\n                                            : \"\"}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                : \"\" }\r\n\r\n\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    validateToken: state.validateToken.testData,\r\n    subjectLists: state.subjects.items.data,\r\n    topicLists: state.topics.items.data\r\n})\r\n\r\nexport default connect(mapStateToProps, { \r\n    validateToken,\r\n    fetchSubjects,\r\n    fetchTopic,\r\n    newTopic,\r\n    updateTopic\r\n})(TopicComponent);","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\nimport NavbarComponent   from '../__layout/Navbar';\r\nimport SideNavComponent   from '../__layout/SideNav';\r\nimport { validateToken } from '../../actions/module/validateAdminActions';\r\nimport { fetchUsers, newUser, userInfo, userDelete, userUpdate } from '../../actions/module/userActions';\r\nimport { notification } from '../__plugins/noty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Modal from '../__layout/Modal';\r\nimport { faEye, faEdit, faTrash, faTrashAlt, faPlus, faTimes, faInfo } from '@fortawesome/free-solid-svg-icons';\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search, CSVExport } from 'react-bootstrap-table2-toolkit';\r\n\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\n\r\nimport { create } from 'domain';\r\nconst { SearchBar } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\nclass UsersComponent extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"cardStatus\": false,\r\n            \"cardActive\": \"\",\r\n            \"disabled\": false,\r\n            \"newUser\": {},\r\n            \"newUserEmail\": \"\",\r\n            \"newUserPassword\": \"\",\r\n            \"newUserFirstName\": \"\",\r\n            \"newUserMiddleName\": \"\",\r\n            \"newUserLastName\": \"\",\r\n            \"newUserBirthdate\": \"\",\r\n            \"newUserGender\": \"\",\r\n            \"newUserSchool\": \"male\",\r\n            \"newUserType\": \"user\",\r\n            \"updateUserEmail\": \"\",\r\n            \"updateFirstName\": \"\",\r\n            \"updateUserLastName\":\"\",\r\n            \"isModalOpen\": false\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.formCreateUser = this.formCreateUser.bind(this);\r\n        this.formUpdateUser = this.formUpdateUser.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if (localStorage.getItem(\"pinnacleAdmin\") !== null) {\r\n            this.props.validateToken(this.state).then(tokenValidate => {\r\n                if(tokenValidate.payload.status !== 200){\r\n                    this.props.history.push(\"/login\");\r\n                }else{\r\n                    this.props.fetchUsers();\r\n                }\r\n            });\r\n        }else {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.users){\r\n            if(nextProps.users.result === \"success\"){\r\n\r\n            }else if(nextProps.users.result === \"failed\"){\r\n                notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${nextProps.users.message}`)\r\n            }\r\n            else{\r\n                notification(\"error\", `<i class = \"fa fa-info-circle\"></i> Something went wrong, Please try again`)\r\n            }\r\n        }\r\n        if(nextProps.user){\r\n            this.setState({disabled: false});\r\n\r\n            console.log(nextProps.user)\r\n            if(nextProps.user.result === \"success\"){\r\n                this.setState({updateUserFirstName: nextProps.user.data.firstName})\r\n                this.setState({updateUserLastName: nextProps.user.data.lastName})\r\n            }else if(nextProps.user.result === \"failed\"){\r\n                notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${nextProps.users.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-info-circle\"></i> Something went wrong, Please try again`)\r\n            }\r\n        }\r\n        if(nextProps.userDeleted){\r\n            console.log(nextProps.userDeleted)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let users = new Array();\r\n        if(this.props.users){\r\n            this.props.users.data.items.forEach( user => {\r\n                users.push({\r\n                    role: user.isAdmin === true ? <span className=\"badge badge-info\">admin</span> : <span className=\"badge badge-success\">user</span>,\r\n                    subjectCode: user.subjectCode == null || user.subjectCode == \"\" ? <span className=\"badge badge-danger\">{user.isAdmin ? \"admin\" : \"not enrolled\"}</span> : user.subjectCode,\r\n                    fullName: user.firstName + \" \" + user.lastName,\r\n                    email: user.email,\r\n                    action: <div className = \"\">\r\n                                <button type=\"button\"  className=\"btn btn-primary btn-sm\" onClick={() =>  this.showCard('view', 'show', user.id)}> <FontAwesomeIcon icon = {faEye}/></button> &nbsp;\r\n                                <button type=\"button\"  className=\"btn btn-success btn-sm\" onClick={() =>  this.showCard('edit', 'show', user.id)}> <FontAwesomeIcon icon = {faEdit}/></button> &nbsp;\r\n                                <button type=\"button\"  className=\"btn btn-danger btn-sm\" onClick={() =>  this.toggleState(user.id)}> <FontAwesomeIcon icon = {faTrash}/></button>\r\n                            </div>\r\n                })\r\n            });\r\n        }\r\n        let columns = [\r\n            { dataField: 'role', text: 'Role', width: 1 },\r\n            { dataField: 'subjectCode', text: 'Code', width: 2 },\r\n            { dataField: 'fullName', text: 'Fullname',   style: { width: '400px' }, searchable: true},\r\n            { dataField: 'email', text: 'Email',   style: { width: '350px' }, searchable: true},\r\n            { dataField: 'action', text: 'Action', style: { width: '200px' } }\r\n        ]\r\n        var bTableOptions = {\r\n            noDataText: 'Your_custom_text'\r\n        };\r\n        return (\r\n            <div>\r\n                 {this.state.isModalOpen && (\r\n                    <Modal id=\"modal\" isOpen={this.state.isModalOpen} onClose={this.toggleState} title = \"Delete\" type = \"delete-user\" data = {this.props.user}>\r\n                        {/* data = {this.props.subjectInfoProps} */}\r\n                        <div className=\"box-body\">Are you sure you want to delete this <b> {this.props.user ? this.props.user.data.lastName + \", \" + this.props.user.data.firstName : \"\"} </b>?</div>\r\n                    </Modal>\r\n                )}\r\n                <SideNavComponent/>\r\n                <div className=\"main\">\r\n                    <NavbarComponent/>\r\n                    <div className=\"container\">\r\n                        <div className = \"col\">\r\n                            <br/>\r\n                            <h2>Users</h2>\r\n                            <ol className=\"breadcrumb\">\r\n                                <li className=\"breadcrumb-item\"><a href=\"#\">Dashboard</a></li>\r\n                                <li className=\"breadcrumb-item\">Users</li>\r\n                            </ol>\r\n                            <div className = \"row\">\r\n                                <div className = {this.state.cardStatus == true ? \"col-md-7\" : \"col\"}>\r\n                                    <div className=\"card card-custom-border\">\r\n                                        <div className=\"card-header\">\r\n                                            Content box\r\n                                            <small className = \"float-right\">\r\n                                                {\r\n                                                    this.state.cardStatus == true ?  \"\" :  <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'show', '')}><FontAwesomeIcon icon = {faPlus}/> Add new user</a>\r\n                                                }\r\n                                            </small>\r\n                                        </div>\r\n\r\n                                        <div className=\"card-body\">\r\n                                       \r\n                                            <ToolkitProvider\r\n                                            keyField=\"id\"\r\n                                            data={ users }\r\n                                            columns={ columns }\r\n                                            options = {bTableOptions}\r\n                                            search\r\n                                            >\r\n                                            {\r\n                                                props => (\r\n                                                <div>\r\n                                                    <SearchBar { ...props.searchProps } />\r\n                                                    <hr />\r\n                                                    <BootstrapTable { ...props.baseProps } pagination={ paginationFactory() }/>\r\n                                                </div>\r\n                                                )\r\n                                            }\r\n                                            </ToolkitProvider>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                                { this.state.cardStatus == true ?\r\n                                <div className = \"col-md-5\">\r\n                                    <div className=\"card border-primary\">\r\n                                        <div className=\"card-header\">\r\n                                            {this.state.cardActive == \"view\" ? \"User Information\" : \"\"}\r\n                                            {this.state.cardActive == \"create\" ? \"Create New Admin User\": \"\"}\r\n                                            {this.state.cardActive == \"edit\" ? \"Edit User Information\": \"\"}\r\n                                            <small className = \"float-right\">\r\n                                                <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'hide')}>\r\n                                                    <FontAwesomeIcon icon = {faTimes}/> Close\r\n                                                </a>\r\n                                            </small>\r\n                                        </div>\r\n                                        <div className=\"card-body\">\r\n                                            {this.state.cardActive == \"create\" ?  \r\n                                                <form onSubmit = {this.formCreateUser} id = \"createUserForm\">\r\n                                                    {/* <div className=\"form-group\">\r\n                                                        <label for=\"name\">Type</label>\r\n                                                        <select className = \"form-control\" name = \"newUserType\" onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}> \r\n                                                            <option value = \"user\">User</option>\r\n                                                            <option value = \"admin\">Admin</option>\r\n                                                        </select>\r\n                                                    </div> */}\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"name\">Email</label>\r\n                                                        <input type=\"email\" className=\"form-control\" placeholder=\"e.g juandelacruz@mail.com\" name = \"newUserEmail\" value = {this.state.newUserEmail} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"name\">Password</label>\r\n                                                        <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" name = \"newUserPassword\" value = {this.state.newUserPassword} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">First Name</label>\r\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter first name\" name = \"newUserFirstName\"  value = {this.state.newUserFirstName} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">Last Name</label>\r\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter last name\" name = \"newUserLastName\"  value = {this.state.newUserLastName} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    {/* {this.state.newUserType === \"admin\" ? \"\" : \r\n                                                    <div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"code\">Birthdate</label>\r\n                                                            <input type=\"date\" className=\"form-control\" placeholder=\"Enter birthdate\" name = \"newUserBirthdate\"  value = {this.state.newUserBirthdate} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"code\">Gender</label>\r\n                                                            <select className = \"form-control\" name = \"newUserGender\" onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}> \r\n                                                                <option value = \"male\">Male</option>\r\n                                                                <option value = \"female\">Female</option>\r\n                                                            </select>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"code\">School</label>\r\n                                                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter school\" name = \"newUserSchool\"  value = {this.state.subjectCode} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    } */}\r\n                                                    <div className=\"form-group\">\r\n                                                        <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                        {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </form>\r\n                                            : \"\"}\r\n\r\n                                            {this.state.cardActive == \"edit\" ?  \r\n                                                <form onSubmit = {this.formUpdateUser} id = \"updateUserForm\">\r\n                                                    {/* <div className=\"form-group\">\r\n                                                        <label for=\"name\">Type</label>\r\n                                                        <select className = \"form-control\" name = \"newUserType\" onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}> \r\n                                                            <option value = \"user\">User</option>\r\n                                                            <option value = \"admin\">Admin</option>\r\n                                                        </select>\r\n                                                    </div> */}\r\n                                                    {/* <div className=\"form-group\">\r\n                                                        <label for=\"name\">Email</label>\r\n                                                        <input type=\"email\" className=\"form-control\" placeholder=\"e.g juandelacruz@mail.com\" name = \"updateUserEmail\" value = {this.state.updateUserEmail} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div> */}\r\n                                                    {/* <div className=\"form-group\">\r\n                                                        <label for=\"name\">Password</label>\r\n                                                        <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" name = \"updateUserPassword\" value = {this.state.updateUserPassword} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div> */}\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">First Name</label>\r\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter first name\" name = \"updateUserFirstName\"  value = {this.state.updateUserFirstName} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    {/* <div className=\"form-group\">\r\n                                                        <label for=\"code\">Middle Name</label>\r\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter middle name (optional)\" name = \"newUserMiddleName\"  value = {this.state.subjectCode} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div> */}\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">Last Name</label>\r\n                                                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter last name\" name = \"updateUserLastName\"  value = {this.state.updateUserLastName} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    {/* {this.state.newUserType === \"admin\" ? \"\" : \r\n                                                    <div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"code\">Birthdate</label>\r\n                                                            <input type=\"date\" className=\"form-control\" placeholder=\"Enter birthdate\" name = \"newUserBirthdate\"  value = {this.state.subjectCode} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"code\">Gender</label>\r\n                                                            <select className = \"form-control\" name = \"newUserGender\" onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}> \r\n                                                                <option value = \"male\">Male</option>\r\n                                                                <option value = \"female\">Female</option>\r\n                                                            </select>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"code\">School</label>\r\n                                                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter school\" name = \"newUserSchool\"  value = {this.state.newUserSchool} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    } */}\r\n                                                    <div className=\"form-group\">\r\n                                                        <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                        {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </form>\r\n                                            : \"\"}\r\n\r\n\r\n                                            {this.state.cardActive == \"view\" ?\r\n                                                <div>\r\n                                                { this.props.user ? \r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-md-12 post\">\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"col-md-12\">\r\n                                                                    {this.props.user.data.subjectCode === \"\" ? \r\n                                                                        <div className=\"alert-danger center\"> <p>{this.props.user.data.isAdmin ? \"This user is admin\" : \"This student not enrolled\"} </p> </div> : \r\n                                                                        <h6>Subject Code: <small>{this.props.user.data.subjectCode}</small></h6>\r\n                                                                    }\r\n                                                                    <hr/>\r\n                                                                    <h6>Fullname: <small>{this.props.user.data.lastName}, {this.props.user.data.firstName} {this.props.user.data.middleName}</small></h6>\r\n                                                                    <h6>Email: <small>{this.props.user.data.email}</small></h6>\r\n                                                                    {this.props.user.data.gender !== \"\" ?  <h6>Gender: <small>{this.props.user.data.gender}</small></h6> : \"\" }\r\n                                                                    {this.props.user.data.school !== \"\" ?  <h6>School: <small>{this.props.user.data.school}</small></h6> : \"\" }\r\n                                                                    <h6>Member Since: <small><Moment format=\"MMMM D YYYY\">{this.props.user.data.createdAt}</Moment></small></h6>\r\n                                                                    \r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                :  \r\n                                                <div className = \"d-flex align-items-center flex-column\">\r\n                                                    <div className=\"spinner-border text-primary\" role=\"status\"></div>\r\n                                                </div>\r\n                                                }\r\n                                            </div>\r\n                                            : \"\"}\r\n\r\n\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div> \r\n                                : \"\"}\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    showCard(todo, status, id){\r\n        if(status == \"show\"){\r\n            this.setState({cardStatus: true})\r\n            this.setState({cardActive: todo})\r\n            if(todo == \"view\"){\r\n                this.setState({disabled: true});\r\n                this.props.userInfo(id);\r\n            }else if(todo == \"edit\"){\r\n                this.setState({disabled: true});\r\n                this.props.userInfo(id);\r\n            }\r\n        }else{\r\n            this.setState({cardStatus: false})\r\n        }\r\n    }\r\n\r\n    onChange(e){\r\n        console.log(e.target.name + \" : \" + e.target.value)\r\n        this.setState({[e.target.name]: e.target.value})\r\n        // console.log(this.state.newUserEmail)\r\n    }\r\n\r\n    formCreateUser(e){\r\n        e.preventDefault();\r\n        this.setState( {disabled: !this.state.disabled} )\r\n        let formNewUser = {\r\n            \"email\": this.state.newUserEmail,\r\n            \"password\": this.state.newUserPassword,\r\n            \"firstName\": this.state.newUserFirstName,\r\n            \"middleName\": this.state.newUserMiddleName,\r\n            \"lastName\": this.state.newUserLastName,\r\n        }\r\n        // if(this.state.newUserType === \"admin\"){\r\n        //     formNewUser.isAdmin = true;\r\n\r\n        // }else if(this.state.newUserType === \"user\"){\r\n        //     formNewUser.isAdmin = false;\r\n        //     formNewUser.birthDate = this.state.newUserBirthdate;\r\n        //     formNewUser.gender = this.state.newUserGender;\r\n        //     formNewUser.school = this.state.newUserSchool;\r\n        // }else{\r\n        //     notification(\"error\", `<i class = \"fa fa-info-circle\"></i> Input user type`)\r\n        // }\r\n        // console.log(formNewUser)\r\n        this.props.newUser(formNewUser).then(data => {\r\n            notification(\"success\", `<i class = \"fa fa-checked\"></i> ${data.payload.message}`)\r\n            this.setState({newUserEmail: \"\"})\r\n            this.setState({newUserPassword: \"\"})\r\n            this.setState({newUserFirstName: \"\"})\r\n            this.setState({newUserMiddleName: \"\"})\r\n            this.setState({newUserLastName: \"\"})\r\n            this.setState({disabled: false});\r\n            this.props.fetchUsers();\r\n            // if(data.payload.result === \"success\"){\r\n            //     notification(\"error\", `<i class = \"fa fa-checked\"></i> ${data.payload.message}`)\r\n            // }else if(data.payload.result === \"failed\"){\r\n            //     notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${data.payload.message}`)\r\n            // }else{\r\n            //     notification(\"error\", `<i class = \"fa fa-info-circle\"></i> Something went wrong, Please try again`)\r\n            // }\r\n        });\r\n    }\r\n    \r\n    formUpdateUser(e){\r\n        e.preventDefault();\r\n        this.setState( {disabled: !this.state.disabled} )\r\n        let formUpdateUser = {\r\n            \"firstName\": this.state.updateUserFirstName,\r\n            \"lastName\": this.state.updateUserLastName\r\n        }\r\n        this.props.userUpdate(this.props.user.data.id, formUpdateUser).then(data => {\r\n            \r\n            this.setState({disabled: false});\r\n            if(data.payload.result === \"success\"){\r\n                this.setState({updateUserFirstName: \"\"})\r\n                this.setState({updateUserLastName: \"\"})\r\n                this.setState({cardStatus: false})\r\n                this.props.fetchUsers();\r\n                notification(\"success\", `<i class = \"fa fa-checked\"></i> ${data.payload.message}`)\r\n            }else if(data.payload.result === \"failed\"){\r\n                notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${data.payload.message}`)\r\n            }else{\r\n                notification(\"error\", `<i class = \"fa fa-info-circle\"></i> Something went wrong, Please try again`)\r\n            }\r\n        })\r\n    }\r\n\r\n    toggleState = (id) => {\r\n        // alert(window.location.href)\r\n        if (typeof id === 'undefined') {\r\n            this.setState({ isModalOpen: false});\r\n        }else{\r\n            this.props.userInfo(id);\r\n            this.setState({ isModalOpen: !this.state.isModalOpen});\r\n        }\r\n        // this.state.isModalOpen ? document.body.style.overflow = \"\" : document.body.style.overflow = \"hidden\";\r\n    };\r\n\r\n}\r\n\r\nUsersComponent.propTypes = {\r\n    fetchUsers: PropTypes.func.isRequired,\r\n    users:  PropTypes.array,\r\n    newUser: PropTypes.func.isRequired,\r\n    addedUser: PropTypes.object,\r\n    userInfo: PropTypes.func.isRequired,\r\n    user: PropTypes.object,\r\n    userDelete: PropTypes.func.isRequired,\r\n    userDeleted: PropTypes.object,\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    validateToken: state.validateToken.testData,\r\n    users: state.users.lists,\r\n    addedUser: state.users.list,\r\n    user: state.users.info,\r\n    userDeleted: state.users.delete\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, { \r\n    validateToken,\r\n    fetchUsers,\r\n    newUser,\r\n    userInfo,\r\n    userDelete,\r\n    userUpdate\r\n})(UsersComponent);\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\nimport NavbarComponent   from '../__layout/Navbar';\r\nimport SideNavComponent   from '../__layout/SideNav';\r\nimport { validateToken } from '../../actions/module/validateAdminActions';\r\nimport { fetchSubjects } from '../../actions/module/subjectActions';\r\nimport { \r\n    fetchSubjectCode, \r\n    newSubjectCode, \r\n    fetchSubjectCodeInfo, \r\n    updateSubjectCode,\r\n    resendSubjectCode\r\n} from '../../actions/module/subjectCodeActions';\r\nimport { notification } from '../__plugins/noty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEdit, faEnvelope ,faPlus, faTimes, faInfo } from '@fortawesome/free-solid-svg-icons';\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport Modal from '../__layout/Modal';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\n\r\nclass SubjectCodeComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \"cardStatus\": false,\r\n            \"isModalOpen\": false,\r\n            \"cardActive\": \"\",\r\n            \"subjectCodeType\": \"single\",\r\n            \"subjectCodeEmail\": \"\",\r\n            \"subjectOrgName\": \"\",\r\n            \"subjectTotalCode\": \"\",\r\n            \"selectedSubjects\": [],\r\n            \"updateSelectedSubjects\": []\r\n\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onChangeType = this.onChangeType.bind(this);\r\n        this.formSubjectCode = this.formSubjectCode.bind(this);\r\n        this.addSubject = this.addSubject.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if (localStorage.getItem(\"pinnacleAdmin\") !== null) {\r\n            this.props.validateToken(this.state).then(tokenValidate => {\r\n                if(tokenValidate.payload.status !== 200){\r\n                    this.props.history.push(\"/login\");\r\n                }else{\r\n                    this.props.fetchSubjectCode();\r\n                }\r\n            });\r\n        }else {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.subjectCodeInfo){\r\n            this.setState({disabled: false})\r\n            // var selected = this.state.updateSelectedSubjects;\r\n            // nextProps.subjectCodeInfo.data.subjects.forEach(data => {\r\n            //     console.log(data)\r\n            //     var joined = selected.concat(data.subjectId);\r\n            //     console.log(\"aa>> \" + joined)\r\n            //     this.setState({ updateSelectedSubjects: joined })\r\n            // })\r\n            // console.log(\">>>> \"  + JSON.stringify(this.state.updateSelectedSubjects))\r\n        }\r\n    }\r\n\r\n    showCard(todo, status, id){\r\n        if(status == \"show\"){\r\n            this.setState({cardStatus: true})\r\n            this.setState({cardActive: todo})\r\n            this.props.fetchSubjects();\r\n            if(todo == \"view\"){\r\n                this.setState({disabled: true});\r\n                this.props.fetchSubjectCodeInfo(id);\r\n                document.body.scrollTop = 0;\r\n                document.documentElement.scrollTop = 0;\r\n            }else if(todo == \"edit\"){\r\n                this.setState({ updateSelectedSubjects: new Array() })\r\n                this.setState({disabled: true});\r\n                this.setState({updateLoad: false});\r\n                this.props.fetchSubjectCodeInfo(id);\r\n                document.body.scrollTop = 0;\r\n                document.documentElement.scrollTop = 0;\r\n            }\r\n        }else{\r\n            this.setState({cardStatus: false})\r\n        }\r\n    }\r\n\r\n    onChangeType(e){\r\n        console.log(e.target.value)\r\n        this.setState({subjectCodeType: e.target.value})\r\n    }\r\n    \r\n    onChange(e){\r\n        console.log(e.target.name + \" \" + e.target.value)\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    btnSelectSubject(subject){\r\n        var selected = this.state.selectedSubjects;\r\n        var joined = selected.concat(subject.id);\r\n        if(selected.includes(subject.id)){\r\n            console.log(\"IS HERE\")\r\n            var index = selected.indexOf(subject.id);\r\n            if (index > -1) {\r\n                selected.splice(index, 1);\r\n                this.setState({ selectedSubjects: selected })\r\n            }\r\n        }else{\r\n            this.setState({ selectedSubjects: joined })\r\n        }\r\n    }\r\n\r\n    btnUpdateSelectSubject(subject){\r\n        const arr = [{ subjectId: 1, name: 'fred' }, { subjectId: 2, name: 'bill' }];\r\n        this.checkSubject(this.props.subjectCodeInfo.data.subjects, subject.id, subject.name);\r\n    }\r\n    checkSubject(arr, subjectId, name) {\r\n        var selected = this.state.updateSelectedSubjects;\r\n        var joined = selected.concat(subjectId);\r\n        const found = arr.some(el => el.subjectId === subjectId);\r\n        if (!found){\r\n            // arr.push({ subjectId: subjectId, name: name });\r\n            this.setState({ updateSelectedSubjects: joined })\r\n        } else{ \r\n            notification(\"error\", `<i class = \"fa fa-warning\"></i> User currently enrolled to this subject - ${name}`)\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    addSubject(){\r\n        let addSubject = new Array()\r\n        if(this.state.updateSelectedSubjects.length > 0){\r\n            // let currentSelected = this.state.updateSelectedSubjects;\r\n            console.log(this.props.subjects.subjects.length + \" > \" + this.props.subjectCodeInfo.data.subjects.length)\r\n            this.props.subjectCodeInfo.data.subjects.map( list => {\r\n                addSubject.push(list.subjectId);\r\n            });\r\n            let final = addSubject.concat(this.state.updateSelectedSubjects)\r\n            // this.setState({disabled: true})\r\n            let formData = {\r\n                \"subjectCode\": this.props.subjectCodeInfo.data.subjectCode,\r\n                \"userId\": this.props.subjectCodeInfo.data.userId,\r\n                \"email\": this.props.subjectCodeInfo.data.email,\r\n                \"organizationName\": this.props.subjectCodeInfo.data.organizationName,\r\n                \"subjects\": final\r\n            }\r\n            this.props.updateSubjectCode(this.props.subjectCodeInfo.data.id, formData).then(res => {\r\n                console.log(\">>>  \" + JSON.stringify(res))\r\n            })\r\n            // console.log(\"updateSelectedSubjects>> \" + JSON.stringify(formData))\r\n        }else{\r\n            notification(\"error\", `<i class = \"fa fa-warning\"></i> Select subject to add`)\r\n        }\r\n    }\r\n\r\n    toggleState = (id) => {\r\n        // alert(window.location.href)\r\n        if (typeof id === 'undefined') {\r\n            this.setState({ isModalOpen: false});\r\n        }else{\r\n            this.props.fetchSubjectCodeInfo(id);\r\n            this.setState({ isModalOpen: !this.state.isModalOpen});\r\n        }\r\n    };\r\n\r\n    formSubjectCode(e){\r\n        e.preventDefault();\r\n        if(this.state.selectedSubjects.length > 0){\r\n            this.setState({disabled: true});\r\n            let formData = {\r\n                \"email\": this.state.subjectCodeEmail,\r\n                \"subjects\": this.state.selectedSubjects\r\n            }\r\n            if(this.state.subjectCodeType === 'multiple'){\r\n                formData.count = this.state.subjectTotalCode;\r\n                formData.organizationName = this.state.subjectOrgName;\r\n            }\r\n            console.log(formData)\r\n            this.props.newSubjectCode(formData).then(data => {\r\n                console.log(\">>> \"  + JSON.stringify(data))\r\n                if(data.payload.result === \"success\"){\r\n                    this.props.fetchSubjectCode();\r\n                    notification(\"success\", `<i class = \"fa fa-check\"></i> ${data.payload.message}`)\r\n                    this.setState({disabled: false});\r\n                    this.setState({cardStatus: false});\r\n                }else if(data.payload.result === \"failed\"){\r\n                    notification(\"error\", `<i class = \"fa fa-warning\"></i> ${data.payload.message}`)\r\n                }else{\r\n                    notification(\"error\", `<i class = \"fa fa-warning\"></i> Something went wrong please try agin`)\r\n                }\r\n            });\r\n        }else{\r\n            notification(\"error\", `<i class = \"fa fa-warning\"></i> Select subject/s first`)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let subCodeListsArr = new Array();\r\n        if(this.props.subjectCode){\r\n            console.log(this.props.subjectCode)\r\n            if(this.props.subjectCode.items.length > 0){\r\n                this.props.subjectCode.items.forEach( subCode => {\r\n                    subCodeListsArr.push({\r\n                        subjectCode: subCode.subjectCode,\r\n                        isActivated: subCode.userId === \"\" ? <small className = \"text text-danger\">Not activated</small> : <small>Activated</small>,\r\n                        email: subCode.email,\r\n                        orgName: subCode.organizationName === \"\" ? <small className = \"text text-primary\">not an organization</small> : subCode.organizationName,\r\n                        action: <div className = \"\">\r\n                                    {subCode.userId === \"\" ? <button type=\"button\"  className=\"btn btn-secondary btn-sm\" onClick={() =>  this.toggleState(subCode.id)}> <FontAwesomeIcon icon = {faEnvelope}/></button> : \"\"}\r\n                                    &nbsp;<button type=\"button\"  className=\"btn btn-primary btn-sm\" onClick={() =>  this.showCard('view', 'show', subCode.id)}> <FontAwesomeIcon icon = {faEye}/></button>\r\n                                    &nbsp;<button type=\"button\"  className=\"btn btn-success btn-sm\" onClick={() =>  this.showCard('edit', 'show', subCode.id)}> <FontAwesomeIcon icon = {faEdit}/></button> &nbsp;\r\n                                </div>\r\n                    })\r\n                })\r\n            }\r\n        }else{\r\n            subCodeListsArr = [];\r\n        }\r\n        let columns = [\r\n            { dataField: 'subjectCode', text: 'Subject Code',   style: { width: '100px' }, searchable: true},\r\n            { dataField: 'isActivated', text: 'Is Activated',   style: { width: '200px' }, searchable: true},\r\n            { dataField: 'email', text: 'Email',   style: { width: '200px' }, searchable: true},\r\n            { dataField: 'orgName', text: 'Organiztion Name',   style: { width: '400px' }, searchable: true},\r\n            { dataField: 'action', text: 'Action', style: { width: '200px' } }\r\n        ]\r\n        return (\r\n            <div>\r\n\r\n                <SideNavComponent/>\r\n                <div className=\"main\">\r\n                    <NavbarComponent/>\r\n                        {/* <div className=\"\"> */}\r\n                    <div className=\"container\">\r\n                        <div className = \"col\">\r\n                            <br/>\r\n                            <h2>Subject Codes</h2>\r\n                            <ol className=\"breadcrumb\">\r\n                                <li className=\"breadcrumb-item\"><a href=\"#\">Dashboard</a></li>\r\n                                <li className=\"breadcrumb-item\">Subject Code</li>\r\n                            </ol>\r\n                            <div className = \"row\">\r\n                                <div className = {this.state.cardStatus == true ? \"col-md-7\" : \"col\"}>\r\n                                    <div className=\"card card-custom-border\">\r\n                                        <div className=\"card-header\">\r\n                                            Content box\r\n                                            <small className = \"float-right\">\r\n                                                {\r\n                                                    this.state.cardStatus == true ?  \"\" :  <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'show', '')}><FontAwesomeIcon icon = {faPlus}/> Add new subject code</a>\r\n                                                }\r\n                                            </small>\r\n                                        </div>\r\n                                        <div className=\"card-body\">\r\n\r\n                                            <div>\r\n                                                {this.state.isModalOpen && (\r\n                                                <Modal id=\"modal\" isOpen={this.state.isModalOpen} onClose={this.toggleState} title = \"Resend Subject Code\" type = \"resend-subject-code\" data = {this.props.subjectCodeInfo}>\r\n                                                    <div className=\"box-body\">Are you sure you want to resend subject code to this email? <b> {this.props.subjectCodeInfo ? this.props.subjectCodeInfo.data.email : \"\"} </b>?</div>\r\n                                                </Modal>\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <ToolkitProvider\r\n                                                keyField=\"id\"\r\n                                                data={ subCodeListsArr }\r\n                                                columns={ columns }\r\n                                                search\r\n                                                >\r\n                                                {\r\n                                                    props => (\r\n                                                    <div>\r\n                                                        <SearchBar { ...props.searchProps } />\r\n                                                        {/* <ClearSearchButton { ...props.searchProps } /> */}\r\n                                                        <hr />\r\n                                                        <BootstrapTable { ...props.baseProps } pagination={ paginationFactory() }/>\r\n                                                    </div>\r\n                                                    )\r\n                                                }\r\n                                                </ToolkitProvider>  \r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n                                { this.state.cardStatus == true ?\r\n                                <div className = \"col-md-5\">\r\n                                    <div className=\"card border-primary\">\r\n                                        <div className=\"card-header\">\r\n                                            {this.state.cardActive == \"view\" ? \"Subject Information\" : \"\"}\r\n                                            {this.state.cardActive == \"create\" ? \"Create new subject code\": \"\"}\r\n                                            {this.state.cardActive == \"edit\" ? \"Edit subject code\": \"\"}\r\n                                            <small className = \"float-right\">\r\n                                                <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'hide')}>\r\n                                                    <FontAwesomeIcon icon = {faTimes}/> Close\r\n                                                </a>\r\n                                            </small>\r\n                                        </div>\r\n                                        <div className=\"card-body\">\r\n                                            {this.state.cardActive == \"create\" ?\r\n                                                <form onSubmit = {this.formSubjectCode} id = \"createSubjectForm\">\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">Select mode</label>\r\n                                                        <select className = \"form-control\" onChange = {this.onChangeType} disabled = {(this.state.disabled)? \"disabled\" : \"\"}> \r\n                                                            <option value = \"single\">Single</option>\r\n                                                            <option value = \"multiple\">Multiple</option>\r\n                                                        </select>\r\n                                                    </div>\r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">Email</label>\r\n                                                        <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" name = \"subjectCodeEmail\"  value = {this.state.subjectCodeEmail} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                    </div>\r\n                                                    {this.state.subjectCodeType == \"multiple\" ? \r\n                                                        <div><div className=\"form-group\">\r\n                                                            <label for=\"code\">Organization Name</label>\r\n                                                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter organization name\" name = \"subjectOrgName\"  value = {this.state.subjectOrgName} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"code\">Total Code</label>\r\n                                                            <input type=\"number\" className=\"form-control\" placeholder=\"Enter number\" name = \"subjectTotalCode\"  value = {this.state.subjectTotalCode} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div></div> \r\n                                                        : \"\"\r\n                                                    }\r\n                                                    \r\n                                                    <div className=\"form-group\">\r\n                                                        <label for=\"code\">Select subject to enroll</label>\r\n                                                        {this.props.subjects ? \r\n                                                            <div class=\"row\">\r\n                                                                <div class=\"col-md-12\">\r\n                                                                    <div>\r\n                                                                    {this.props.subjects.subjects.map( subj => \r\n                                                                        <button \r\n                                                                            type = \"button\" \r\n                                                                            class= {this.state.selectedSubjects.length > 0 ? \r\n                                                                                        this.state.selectedSubjects.includes(subj.id) ? \r\n                                                                                            \"btn btn-success btn-block\" : \r\n                                                                                            \"btn btn-secondary btn-block\" \r\n                                                                                        : \"btn btn-secondary btn-block\"\r\n                                                                                    }\r\n                                                                            key = {subj.id} \r\n                                                                            onClick = {this.btnSelectSubject.bind(this, subj)}\r\n                                                                            disabled = {(this.state.disabled)? \"disabled\" : \"\"}\r\n                                                                        >\r\n                                                                            {this.state.selectedSubjects.length > 0 ? this.state.selectedSubjects.includes(subj.id) ? <i class=\"fa fa-check\"></i> : \"\" : \"\"} {subj.code}\r\n                                                                        </button>\r\n\r\n                                                                    )}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        : <div><i class=\"fa fa-spinner fa-spin\"></i> Loading subjects... </div>}\r\n                                                    </div>\r\n                                                    <hr/>\r\n                                                    <div className=\"form-group\">\r\n                                                        <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                        {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </form>\r\n                                            : \"\"}\r\n\r\n                                            {this.state.cardActive == \"view\" ? \r\n                                                <div>\r\n                                                    {this.props.subjectCodeInfo ? \r\n                                                        <div key = {this.props.subjectCodeInfo.data.id}>\r\n                                                            <p>Code: <b>{this.props.subjectCodeInfo.data.subjectCode}</b></p>\r\n                                                            <p>Email: <b>{this.props.subjectCodeInfo.data.email}</b></p>\r\n                                                            <p>User: <b>{this.props.subjectCodeInfo.data.userId === \"\" ?  <label className = \"text text-danger\">Not Activated</label> : this.props.subjectCodeInfo.data.userId}</b></p>\r\n                                                            <p>Activated At: <b>{this.props.subjectCodeInfo.data.expiresAt}</b></p>\r\n                                                            <p>Expires At: <b>{this.props.subjectCodeInfo.data.expiresAt}</b></p>\r\n                                                            <p>Subject/s Enrolled: <hr/><b><ul>{this.props.subjectCodeInfo.data.subjects.map( subEn => <li> {subEn.name} </li>)}</ul></b></p>\r\n                                                        </div>\r\n                                                        \r\n                                                    : \"\"}\r\n                                                </div>\r\n                                            : \"\"}\r\n\r\n                                            {this.state.cardActive == \"edit\" ? \r\n                                                <div>\r\n                                                    {/* {this.props.subjectCodeInfo.data.subjects.length === this.props.subjects.subjects.length ? \"ALL SUBJECT ENROLLED\" :  */}\r\n                                                    {this.props.subjectCodeInfo && this.props.subjects ? \r\n                                                        this.props.subjectCodeInfo.data.subjects.length === this.props.subjects.subjects.length ? <div className=\"alert alert-dismissible alert-danger\"> <span className = \"fa fa-warning\"></span> Unable to update - all subjects are enrolled to this user</div>: \r\n                                                     <div>\r\n                                                     <b>Subjects enrolled:</b> <hr/>\r\n                                                     {this.props.subjectCodeInfo \r\n                                                         ? \r\n                                                         <ul>\r\n                                                             {this.props.subjectCodeInfo.data.subjects.map( list => \r\n                                                                 <li>{list.name}</li>\r\n                                                             )}\r\n                                                         </ul>\r\n                                                         : <div><i class=\"fa fa-spinner fa-spin\"></i> Loading enrolled subject/s... </div>}\r\n                                                     <hr/>\r\n                                                     <b>Add subject to enroll:</b> <hr/>\r\n                                                     {this.props.subjects ? \r\n                                                         this.props.subjects.subjects.map( subj => \r\n                                                             <button \r\n                                                                 type = \"button\" \r\n                                                                 class= {this.state.updateSelectedSubjects.length > 0 ? \r\n                                                                             this.state.updateSelectedSubjects.includes(subj.id) ? \r\n                                                                                 \"btn btn-success btn-block\" : \r\n                                                                                 \"btn btn-secondary btn-block\" \r\n                                                                             : \"btn btn-secondary btn-block\"\r\n                                                                         }\r\n                                                                 key = {subj.id} \r\n                                                                 onClick = {this.btnUpdateSelectSubject.bind(this, subj)}\r\n                                                                 disabled = {(this.state.disabled)? \"disabled\" : \"\"}\r\n                                                             >\r\n                                                                 {this.state.updateSelectedSubjects.length > 0 ? this.state.updateSelectedSubjects.includes(subj.id) ? <i class=\"fa fa-check\"></i> : \"\" : \"\"} {subj.code}\r\n                                                             </button>\r\n                                                         )\r\n                                                     : \"\"}\r\n                                                     <hr/>\r\n                                                     <button type=\"button\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"} onClick = {this.addSubject}>\r\n                                                         {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Add Subject'}\r\n                                                     </button>\r\n                                                     </div>\r\n                                                    : <div><i class=\"fa fa-spinner fa-spin\"></i> Loading content... </div>}\r\n                                                   \r\n\r\n                                                </div>\r\n                                            : \"\"}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                : \"\" }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    validateToken: state.validateToken.testData,\r\n    subjects: state.subjects.items.data,\r\n    subjectCode: state.subjectCode.items.data,\r\n    subjectCodeInfo: state.subjectCode.info\r\n})\r\n\r\nexport default connect(mapStateToProps, { \r\n    validateToken,\r\n    fetchSubjects,\r\n    fetchSubjectCode,\r\n    newSubjectCode,\r\n    fetchSubjectCodeInfo,\r\n    updateSubjectCode,\r\n    resendSubjectCode\r\n})(SubjectCodeComponent);","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\nimport NavbarComponent   from '../__layout/Navbar';\r\nimport SideNavComponent   from '../__layout/SideNav';\r\nimport { validateToken } from '../../actions/module/validateAdminActions';\r\nimport { fetchNews, newsInfo, newNews, newsUpdate, newsDelete } from '../../actions/module/newsActions';\r\nimport { uploadFile, getFile } from '../../actions/module/uploadActions';\r\nimport { notification } from '../__plugins/noty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEdit, faTrash, faTrashAlt, faPlus, faTimes, faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { Editor } from '@tinymce/tinymce-react'; \r\n\r\n// import CKEditor from '@ckeditor/ckeditor5-react';\r\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n// import ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\r\n\r\n// import Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\r\n// import Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\r\n// import Underline from '@ckeditor/ckeditor5-basic-styles/src/underline';\r\n// import Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\r\n// import CKEditor from '@ckeditor/ckeditor5-react';\r\n// The official CKEditor 5 instance inspector. It helps understand the editor view and model.\r\n// import CKEditorInspector from '@ckeditor/ckeditor5-inspector';\r\n// The base editor class and features required to run the editor.\r\n// import ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\r\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n\r\n// import Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\r\n// import Heading from '@ckeditor/ckeditor5-heading/src/heading';\r\n// import Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\r\n// import Underline from '@ckeditor/ckeditor5-basic-styles/src/underline';\r\n// import Table from '@ckeditor/ckeditor5-table/src/table';\r\n// import TableToolbar from '@ckeditor/ckeditor5-table/src/tabletoolbar';\r\n// import Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\r\n\r\n\r\n\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport Modal from '../__layout/Modal';\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\n\r\n\r\n// const editorConfiguration = {\r\n//     plugins: [ Bold ],\r\n//     toolbar: [ 'bold', ]\r\n// };\r\n\r\n// const editorConfig = {\r\n//     plugins: [\r\n//         // A set of editor features to be enabled and made available to the user.\r\n//         Essentials, Heading, Bold, Italic, Underline, Paragraph, Table, TableToolbar\r\n//     ],\r\n//     toolbar: [\r\n//         'heading',\r\n//         '|',\r\n//         'bold', 'italic', 'underline',\r\n//         '|',\r\n//         'insertTable',\r\n//         '|',\r\n//         'undo', 'redo'\r\n//     ],\r\n//     table: {\r\n//         contentToolbar: [\r\n//             'tableColumn',\r\n//             'tableRow',\r\n//             'mergeTableCells'\r\n//         ]\r\n//     }\r\n// };\r\n\r\nclass NewsComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cardStatus: false,\r\n            cardActive: \"\",\r\n            fileTargetValue: null,\r\n            newsTitle: '',\r\n            newsDescription: '',\r\n            newsAuthor: '',\r\n            updateLoad: true,\r\n            updateNewsTitle: '',\r\n            updateNewsDescription: '',\r\n            updateNewsAuthor: '',\r\n            isModalOpen: false,\r\n            ckEditorValue: '',\r\n            editorData: \"<p>aaa</p>\"\r\n        }\r\n        this.showCard = this.showCard.bind(this);\r\n        this.formCreateNews = this.formCreateNews.bind(this);\r\n        this.formUpdateNews = this.formUpdateNews.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onChangeFile = this.onChangeFile.bind(this);\r\n        this.onEditorChange = this.onEditorChange.bind( this );\r\n\r\n        this.handleEditorDataChange = this.handleEditorDataChange.bind( this );\r\n        this.handleEditorInit = this.handleEditorInit.bind( this );\r\n        }\r\n\r\n        // A handler executed when the user types or modifies the editor content.\r\n        // It updates the state of the application.\r\n        handleEditorDataChange( evt, editor ) {\r\n            this.setState( {\r\n                editorData: editor.getData()\r\n            } );\r\n        }\r\n\r\n        // A handler executed when the editor has been initialized and is ready.\r\n        // It synchronizes the initial data state and saves the reference to the editor instance.\r\n        handleEditorInit( editor ) {\r\n            this.editor = editor;\r\n\r\n            this.setState( {\r\n                editorData: editor.getData()\r\n            } );\r\n\r\n            // CKEditor 5 inspector allows you to take a peek into the editor's model and view\r\n            // data layers. Use it to debug the application and learn more about the editor.\r\n            // CKEditorInspector.attach( editor );\r\n        }\r\n\r\n    \r\n    \r\n    componentDidMount(){\r\n        if (localStorage.getItem(\"pinnacleAdmin\") !== null) {\r\n            this.props.validateToken(this.state).then(tokenValidate => {\r\n                if(tokenValidate.payload.status !== 200){\r\n                    this.props.history.push(\"/login\");\r\n                }else{\r\n                    this.props.fetchNews();\r\n                }\r\n            });\r\n        }else {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.lists){\r\n            if(nextProps.lists.result == \"failed\") notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please refresh the page`)\r\n        }\r\n        if(nextProps.newsDetails){\r\n            this.setState({updateNewsTitle:nextProps.newsDetails.data.title});\r\n            this.setState({updateNewsDescription:nextProps.newsDetails.data.description});\r\n            this.setState({updateNewsAuthor:nextProps.newsDetails.data.author});\r\n            if(nextProps.newsDetails.data.imageUrl == \"\" || nextProps.newsDetails.data.imageUrl == null){\r\n            }else{\r\n                this.props.getFile(nextProps.newsDetails.data.imageUrl)\r\n            }\r\n            this.setState({disabled: false});\r\n        }\r\n        if(nextProps.addedNews){\r\n            this.setState({disabled: false});\r\n            this.setState({fileTargetValue: null});\r\n            this.setState({newsTitle: ''});\r\n            this.setState({newsDescription: ''});\r\n            this.setState({newsAuthor: ''});   \r\n        }\r\n        // if(nextProps.deleteNewsProps){\r\n        //     console.log(nextProps.deleteNewsProps)\r\n        //     this.setState({isModalOpen: false});\r\n        //     if(nextProps.deleteNewsProps.result === \"success\"){\r\n        //         var deleteData = this.props.lists.data.items;\r\n        //         deleteData.splice(nextProps.deleteNewsProps.data._id, 1)\r\n        //         notification(\"success\", `<i class = \"fa fa-check\"></i> ${nextProps.deleteNewsProps.message}`)\r\n        //     }else{\r\n        //         notification(\"error\", `<i class = \"fa fa-remove\"></i> Something went wrong, Please try again`)\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    showCard(todo, status, id){\r\n        if(status == \"show\"){\r\n            this.setState({cardStatus: true})\r\n            this.setState({cardActive: todo})\r\n            if(todo == \"view\"){\r\n                this.setState({disabled: true});\r\n                this.props.newsInfo(id);\r\n            }else if(todo == \"edit\"){\r\n                this.setState({disabled: true});\r\n                this.setState({updateLoad: false});\r\n                this.props.newsInfo(id);\r\n            }\r\n        }else{\r\n            this.setState({cardStatus: false})\r\n        }\r\n    }\r\n\r\n    onEditorChange( evt ) {\r\n        if(this.state.cardActive === 'create'){\r\n            // this.setState({ newsTitle: evt.editor.getData() });\r\n            this.setState({ newsDescription: evt.target.getContent() });\r\n        }else if(this.state.cardActive === 'edit'){\r\n            // this.setState({ updateNewsTitle: evt.editor.getData() });\r\n            this.setState({ updateNewsDescription: evt.target.getContent() });\r\n        }\r\n        \r\n    }\r\n\r\n    formCreateNews(e){\r\n        e.preventDefault();\r\n        if(this.state.fileTargetValue == null){\r\n            notification(\"error\", `<i class = \"fa fa-info-circle\"></i> Upload news image first`)\r\n        }else{\r\n            this.setState( {disabled: !this.state.disabled} )\r\n            this.props.uploadFile(this.state.fileTargetValue).then(data => {\r\n                  \r\n                if('file' in data.payload){\r\n                    console.log(data.payload)\r\n                    let form = {\r\n                        \"title\":  this.state.newsTitle,\r\n                        \"description\": this.state.newsDescription,\r\n                        \"author\": this.state.newsAuthor,\r\n                        \"imageUrl\": data.payload.file.filename\r\n                    }\r\n                    this.props.newNews(form);\r\n                    notification(\"success\", `<i class = \"fa fa-info-circle\"></i> Successfully added news`)\r\n                    this.props.fetchNews();\r\n                    this.setState({cardStatus: false});\r\n                }else{\r\n                    this.setState({disabled: false});\r\n                    notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${data.payload.message}`)\r\n                }\r\n            \r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    formUpdateNews(e){\r\n        e.preventDefault();\r\n        this.setState({disabled: true});\r\n        let file = this.state.fileTargetValue;\r\n        let form = {\r\n            title: this.state.updateNewsTitle,\r\n            description: this.state.updateNewsDescription,\r\n            author: this.state.updateNewsAuthor,\r\n            imageUrl: this.props.newsDetails.data.imageUrl,\r\n            isArchive: false\r\n        }\r\n        if(file == null || file == \"\"){\r\n            this.props.newsUpdate(this.state, this.props.newsDetails.data.id, form).then(sub => {\r\n                let response = sub.payload.data;\r\n                console.log(\">>>>>>>>>>>>>>>>> \" + JSON.stringify(response))\r\n                this.props.lists.data.items.forEach( data => {\r\n                    if(data.id == response._id){\r\n                        data.title=response.title\r\n                        data.author=response.author\r\n                    }\r\n                });\r\n                this.props.fetchNews();\r\n                this.setState({updateNewsTitle: ''});\r\n                this.setState({updateNewsDescription: ''});\r\n                this.setState({updateNewsAuthor: ''});\r\n                this.setState({fileTargetValue: null});                \r\n                this.setState({disabled: false});\r\n                this.setState({cardStatus: false});\r\n                notification(\"success\", `<i class = \"fa fa-check\"></i> ${sub.payload.message}`);\r\n            });\r\n        }else{\r\n            this.props.uploadFile(file).then(data => {\r\n                if('file' in data.payload){\r\n                    form.imageUrl = data.payload.file.filename;\r\n                    this.props.newsUpdate(this.state, this.props.newsDetails.data.id, form).then(sub => {\r\n                        let response = sub.payload.data;\r\n                        this.props.lists.data.items.forEach( data => {\r\n                            if(data.id == response._id){\r\n                                data.title=response.title\r\n                                data.author=response.author\r\n                            }\r\n                        });\r\n                        this.props.fetchNews();\r\n                        this.setState({updateNewsTitle: ''});\r\n                        this.setState({updateNewsDescription: ''});\r\n                        this.setState({updateNewsAuthor: ''});\r\n                        this.setState({fileTargetValue: null});                \r\n                        this.setState({disabled: false});\r\n                        this.setState({cardStatus: false});\r\n                        notification(\"success\", `<i class = \"fa fa-check\"></i> ${sub.payload.message}`);\r\n                    });\r\n\r\n                }else{\r\n                  this.setState({disabled: false});\r\n                  notification(\"error\", `<i class = \"fa fa-info-circle\"></i> ${data.payload.message}`)\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    onChangeFile(event){\r\n        let file = event.target.files[0];\r\n        if(file == null || file == \"\"){\r\n        }else{\r\n            this.setState({fileTargetValue: file})\r\n        }\r\n    }\r\n\r\n    toggleState = (id) => {\r\n        // alert(window.location.href)\r\n        if (typeof id === 'undefined') {\r\n            this.setState({ isModalOpen: false});\r\n        }else{\r\n            this.props.newsInfo(id);\r\n            this.setState({ isModalOpen: !this.state.isModalOpen});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let items = new Array();\r\n        if(this.props.lists) {\r\n            this.props.lists.data.items.forEach( item => {\r\n                let str = item.title;\r\n                if(item.title === null || item.title === \"\"){\r\n                }else{\r\n                    if(str.length > 30) str = str.substring(0,30) + '...';\r\n                }\r\n                \r\n\r\n                items.push({\r\n                    title: str,\r\n                    author: item.author,\r\n                    createdBy: item.createdBy,\r\n                    isArchive: item.isArchive === true ? <span className=\"badge badge-danger\">true</span> : <span className=\"badge badge-success\">false</span> ,\r\n                    action: <div className = \"\">\r\n                                <button type=\"button\"  className=\"btn btn-primary btn-sm\" onClick={() =>  this.showCard('view', 'show', item.id)}> <FontAwesomeIcon icon = {faEye}/></button> &nbsp;\r\n                                <button type=\"button\"  className=\"btn btn-success btn-sm\" onClick={() =>  this.showCard('edit', 'show', item.id)}> <FontAwesomeIcon icon = {faEdit}/></button> &nbsp;\r\n                                <button type=\"button\"  className=\"btn btn-danger btn-sm\" onClick={() =>  this.toggleState(item.id)}> <FontAwesomeIcon icon = {faTrash}/></button>\r\n                            </div>\r\n                })\r\n            });\r\n        }\r\n\r\n        let columns = [\r\n            { dataField: 'title', text: 'Title', style: { width: '450px' }},\r\n            { dataField: 'author', text: 'Author', style: { width: '300px' }},\r\n            { dataField: 'createdBy', text: 'Created By', style: { width: '300px' }},\r\n            { dataField: 'isArchive', text: 'Is Deleted'},\r\n            { dataField: 'action', text: 'Action', style: { width: '200px' } }\r\n        ]\r\n\r\n        return (\r\n            <div>\r\n                <SideNavComponent/>\r\n                <div className=\"main\">\r\n                    <NavbarComponent/>\r\n                    <div className=\"container\">\r\n                        <div className = \"col\">\r\n                            <br/>\r\n                            <h2>News</h2>\r\n                            <ol className=\"breadcrumb\">\r\n                                <li className=\"breadcrumb-item\"><a href=\"#\">Dashboard</a></li>\r\n                                <li className=\"breadcrumb-item\">News</li>\r\n                            </ol>\r\n                            <div className = \"row\">\r\n                                <div className = {this.state.cardStatus == true ? \"col-md-7\" : \"col\"}>\r\n                                <div className=\"card card-custom-border\">\r\n                                    <div className=\"card-header\">\r\n                                        Content box\r\n                                        <small className = \"float-right\">\r\n                                            {\r\n                                                this.state.cardStatus == true ?  \"\" :  <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'show', '')}><FontAwesomeIcon icon = {faPlus}/> Add new news</a>\r\n                                            }\r\n                                        </small>\r\n                                    </div>\r\n                                        <div className=\"card-body\">\r\n\r\n                                        <div>\r\n                                            {this.state.isModalOpen && (\r\n                                            <Modal id=\"modal\" isOpen={this.state.isModalOpen} onClose={this.toggleState} title = \"Delete\" type = \"delete-news\" data = {this.props.newsDetails}>\r\n                                                <div className=\"box-body\">Are you sure you want to delete this <b> {this.state.updateNewsTitle ? this.state.updateNewsTitle : \"\"} </b>?</div>\r\n                                            </Modal>\r\n                                            )}\r\n                                        </div>\r\n                                        \r\n                                            <ToolkitProvider keyField=\"id\" data={ items } columns={ columns } search >\r\n                                            {\r\n                                                props => (\r\n                                                <div>\r\n                                                    <SearchBar { ...props.searchProps } />\r\n                                                    <hr />\r\n                                                    <BootstrapTable { ...props.baseProps } pagination={ paginationFactory() }/>\r\n                                                </div>\r\n                                                )\r\n                                            }\r\n                                            </ToolkitProvider>\r\n                                        <div>\r\n                                    </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            { this.state.cardStatus == true ?\r\n                            <div className = \"col-md-5\">\r\n                                <div className=\"card border-primary\">\r\n                                    <div className=\"card-header\">\r\n                                        {this.state.cardActive == \"view\" ? \"News Information\" : \"\"}\r\n                                        {this.state.cardActive == \"create\" ? \"Create new news\": \"\"}\r\n                                        {this.state.cardActive == \"edit\" ? \"Edit news\": \"\"}\r\n                                        <small className = \"float-right\">\r\n                                            <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'hide')}>\r\n                                                <FontAwesomeIcon icon = {faTimes}/> Close\r\n                                            </a>\r\n                                        </small>\r\n                                    </div>\r\n                                    <div className=\"card-body\">\r\n                                        {this.state.cardActive == \"create\" ?\r\n                                            <form onSubmit = {this.formCreateNews} id = \"createNewsForm\">\r\n                                            <div className=\"form-group\">\r\n                                                <label for=\"name\">Title</label>\r\n                                                {/* data={this.state.editorData} */}\r\n\r\n                                                {/* <CKEditor\r\n                                                    editor={ClassicEditor}\r\n                                                    data={this.state.editorData}\r\n                                                    config={this.editorConfig}\r\n                                                    onChange={this.handleEditorDataChange}\r\n                                                    onInit={this.handleEditorInit}\r\n                                                /> */}\r\n                                                \r\n\r\n                                                 {/* <CKEditor\r\n                                                    editor={ ClassicEditor }\r\n                                                    data=\"<p>Hello from CKEditor 5!</p>\"\r\n                                                    onInit={ editor => {\r\n                                                        // You can store the \"editor\" and use when it is needed.\r\n                                                        console.log( 'Editor is ready to use!', editor );\r\n                                                    } }\r\n                                                    onChange={ ( event, editor ) => {\r\n                                                        const data = editor.getData();\r\n                                                        console.log( { event, editor, data } );\r\n                                                    } }\r\n                                                    onBlur={ ( event, editor ) => {\r\n                                                        console.log( 'Blur.', editor );\r\n                                                    } }\r\n                                                    onFocus={ ( event, editor ) => {\r\n                                                        console.log( 'Focus.', editor );\r\n                                                    } }\r\n                                                />  */}\r\n\r\n                                                    {/* config={ {\r\n                                                        \r\n                                                        toolbar: [ [ 'bold', 'italic', 'underline'] ]\r\n                                                    } } */}\r\n                                                    {/* old use \r\n                                                    <CKEditor\r\n                                                        editor={ ClassicEditor }\r\n                                                        data=\"<p>Hello from CKEditor 5!</p>\"\r\n\r\n                                                        onInit={ editor => {\r\n                                                            // You can store the \"editor\" and use when it is needed.\r\n                                                            console.log( 'Editor is ready to use!', editor );\r\n                                                        } }\r\n                                                        onChange={ ( event, editor ) => {\r\n                                                            const data = editor.getData();\r\n                                                            console.log( { event, editor, data } );\r\n                                                        } }\r\n                                                        onBlur={ ( event, editor ) => {\r\n                                                            console.log( 'Blur.', editor );\r\n                                                        } }\r\n                                                        onFocus={ ( event, editor ) => {\r\n                                                            console.log( 'Focus.', editor );\r\n                                                        } }\r\n                                                    /> */}\r\n                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter news name\" name = \"newsTitle\" value = {this.state.newsTitle} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> \r\n                                                    \r\n                                                {/* <CKEditor\r\n                                                    editor={ ClassicEditor }\r\n                                                    data=\"\"\r\n                                                    onChange={this.onEditorChange}\r\n                                                /> */}\r\n                                                {/* <input type=\"text\" className=\"form-control\" placeholder=\"Enter news name\" name = \"newsTitle\" value = {this.state.newsTitle} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> */}\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label for=\"description\">Description </label>\r\n                                                {/* <textarea placeholder = \"Enter description\" className=\"form-control\" name = \"newsDescription\" value = {this.state.newsDescription} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> */}\r\n                                                <Editor\r\n                                                        initialValue=\"\"\r\n                                                        init={{\r\n                                                        height: 500,\r\n                                                        menubar: false,\r\n                                                        plugins: [\r\n                                                            'font image underline',\r\n                                                            'advlist autolink lists link image charmap print preview anchor',\r\n                                                            'searchreplace visualblocks code fullscreen',\r\n                                                            'insertdatetime media table paste code help wordcount'\r\n                                                        ],\r\n                                                        // plugins: [\r\n                                                        //     'lists link image paste help wordcount'\r\n                                                        // ],\r\n                                                        toolbar:\r\n                                                            'font undo redo | formatselect | bold italic underline backcolor | \\\r\n                                                            alignleft aligncenter alignright alignjustify | \\\r\n                                                            bullist numlist outdent indent | removeformat image | help'\r\n                                                        }}\r\n                                                        onChange={this.onEditorChange}\r\n                                                    />\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label for=\"name\">Author</label>\r\n                                                <input type=\"text\" className=\"form-control\" placeholder=\"Enter author's name\" name = \"newsAuthor\" value = {this.state.newsAuthor} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label for=\"icon\">Banner</label>\r\n                                                <input type=\"file\" name=\"file\" id = \"fileSelect\" className=\"form-control-file\" onChange={this.onChangeFile} disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                {this.state.fileLoad == true ? <img src = {this.state.fileData} className = \"img-thumb center\"/> : \"\"}\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                  {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                </button>\r\n                                            </div>\r\n                                            </form>\r\n                                        : \"\"}\r\n\r\n                                        {this.state.cardActive == \"edit\" ?\r\n                                            <div>\r\n                                                { this.props.newsInfo ? \r\n\r\n                                                    <form onSubmit = {this.formUpdateNews} id = \"updateSubjectForm\">\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">News Title</label>\r\n                                                            {/* <CKEditor\r\n                                                                data={this.state.updateNewsTitle}\r\n                                                                onChange={this.onEditorChange}\r\n                                                            /> */}\r\n                                                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter news name\" name = \"updateNewsTitle\" value = {this.state.updateNewsTitle} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> \r\n                                                             \r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"description\">Description </label>\r\n                                                            {/* <textarea placeholder = \"Enter description\" className=\"form-control\" name = \"updateNewsDescription\" value = {this.state.updateNewsDescription} onChange = {this.onChange} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> */}\r\n                                                            <Editor\r\n                                                                initialValue={this.state.updateNewsDescription}\r\n                                                                init={{\r\n                                                                height: 500,\r\n                                                                menubar: false,\r\n                                                                plugins: [\r\n                                                                    'font image underline',\r\n                                                                    'advlist autolink lists link image charmap print preview anchor',\r\n                                                                    'searchreplace visualblocks code fullscreen',\r\n                                                                    'insertdatetime media table paste code help wordcount'\r\n                                                                ],\r\n                                                                // plugins: [\r\n                                                                //     'lists link image paste help wordcount'\r\n                                                                // ],\r\n                                                                toolbar:\r\n                                                                    'font undo redo | formatselect | bold italic underline backcolor | \\\r\n                                                                    alignleft aligncenter alignright alignjustify | \\\r\n                                                                    bullist numlist outdent indent | removeformat image | help'\r\n                                                                }}\r\n                                                                onChange={this.onEditorChange}\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Author</label>\r\n                                                            <input \r\n                                                                type=\"text\" \r\n                                                                className=\"form-control\" \r\n                                                                placeholder=\"Author\" \r\n                                                                name = \"updateNewsAuthor\" \r\n                                                                value = {this.state.updateNewsAuthor} \r\n                                                                onChange = {this.onChange} \r\n                                                                required\r\n                                                                disabled = {(this.state.disabled)? \"disabled\" : \"\"}\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"icon\">Update Banner</label>\r\n                                                            <input type=\"file\" name=\"file\" id = \"fileSelect\" className=\"form-control-file\" onChange={this.onChangeFile} disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <hr/>\r\n                                                        {this.props.newsDetails ? \r\n                                                            this.props.newsDetails.data.imageUrl ? \r\n                                                                <div>\r\n                                                                    {this.props.getIcon \r\n                                                                    ? \r\n                                                                        <img src = {this.props.getIcon} className = \"img-thumb\"/> \r\n                                                                    : \r\n                                                                        <div className=\"spinner-border text-default\" role=\"status\"></div>\r\n                                                                    } \r\n                                                                </div>\r\n                                                            : <div className = \"d-flex align-items-center flex-column\"><span className=\"badge badge-warning\">No image uploaded for this content</span></div>\r\n                                                         : \"\" }                                                        \r\n                                                        <hr/>\r\n                                                        <div className=\"form-group\">\r\n                                                            <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                            {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Update'}\r\n                                                            </button>\r\n                                                        </div>\r\n                                                        </form>\r\n                                                :  \r\n                                                <div className = \"d-flex align-items-center flex-column\">\r\n                                                    <div className=\"spinner-border text-primary\" role=\"status\"></div>\r\n                                                </div>\r\n                                                }\r\n                                            </div>\r\n\r\n                                        : \"\"}\r\n\r\n                                        {this.state.cardActive == \"view\" ?\r\n                                        <div>\r\n                                                { this.props.newsDetails ? \r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-md-12 post\">\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"col-md-12\">\r\n                                                                    <h3>{this.props.newsDetails.data.title}</h3>\r\n                                                                    <hr/>\r\n                                                                    \r\n                                                                    <h6>Author: <small>{this.props.newsDetails.data.author}</small></h6>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"col\">\r\n                                                                    {/* <p>{this.props.newsDetails.data.description}</p> */}\r\n                                                                    <p dangerouslySetInnerHTML={{ __html: this.props.newsDetails.data.description }} />\r\n                                                                    <div className = \" d-flex align-items-center flex-column\"> \r\n                                                                        {this.props.newsDetails.data.imageUrl ? \r\n                                                                            <div>\r\n                                                                                {this.props.getIcon \r\n                                                                                ? \r\n                                                                                    <img src = {this.props.getIcon} className = \"img-thumb\"/> \r\n                                                                                : \r\n                                                                                    <div className=\"spinner-border text-default\" role=\"status\"></div>\r\n                                                                                } \r\n                                                                            </div>\r\n                                                                        : <div className = \"d-flex align-items-center flex-column\"><span className=\"badge badge-warning\">No icon uploaded for this content</span></div>\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                :  \r\n                                                <div className = \"d-flex align-items-center flex-column\">\r\n                                                    <div className=\"spinner-border text-primary\" role=\"status\"></div>\r\n                                                </div>\r\n                                                }\r\n                                            </div>\r\n                                        : \"\"}\r\n\r\n\r\n                                    \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            : \"\" }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onChange(e){\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    \r\n}\r\n\r\n// SubjectComponent.propTypes = {\r\n//     fetchSubjects: PropTypes.func.isRequired,\r\n//     newSubject: PropTypes.func.isRequired,\r\n//     subjectUpdate: PropTypes.func.isRequired,\r\n//     subjectDelete: PropTypes.func.isRequired,\r\n//     uploadFile: PropTypes.func.isRequired,\r\n//     getFile: PropTypes.func.isRequired,\r\n//     subjects:  PropTypes.array.isRequired,\r\n//     fileUploaded: PropTypes.object,\r\n//     subjectInfo: PropTypes.func.isRequired,\r\n//     subjectInfoProps: PropTypes.object,\r\n//     addedSubject: PropTypes.object,\r\n//     updateSubject: PropTypes.object,\r\n//     deleteSubjectProps: PropTypes.object\r\n// };\r\n\r\nconst mapStateToProps = state => ({\r\n    validateToken: state.validateToken.testData,\r\n    lists: state.news.lists,\r\n    newsDetails: state.news.list,\r\n    getIcon: state.file.image,\r\n    addedNews: state.news.addedNews,\r\n    updateNews: state.news.newsUpdate,\r\n    deleteNewsProps: state.news.newsDelete\r\n})\r\n\r\nexport default connect(mapStateToProps, { \r\n    validateToken,\r\n    fetchNews,\r\n    newsInfo,\r\n    getFile,\r\n    uploadFile,\r\n    newNews,\r\n    newsUpdate,\r\n    newsDelete\r\n})(NewsComponent);\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\nimport NavbarComponent   from '../__layout/Navbar';\r\nimport SideNavComponent   from '../__layout/SideNav';\r\nimport { validateToken } from '../../actions/module/validateAdminActions';\r\nimport { fetchSubjects } from '../../actions/module/subjectActions';\r\nimport { fetchTopic } from '../../actions/module/topicActions';\r\nimport { fetchQuestions, newQuestion, fetchQuestionInfo, updateQuestion } from '../../actions/module/questionsActions';\r\nimport { notification } from '../__plugins/noty';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEdit, faTrash, faTrashAlt, faPlus, faTimes, faInfo } from '@fortawesome/free-solid-svg-icons';\r\n// import EditorJs from 'react-editor-js';\r\n// import { EDITOR_JS_TOOLS } from './tools'\r\n\r\n\r\n// import CKEditor from '@ckeditor/ckeditor5-react';\r\n// import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\n// import ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\r\n\r\n\r\n// import Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\r\n\r\n\r\nimport { Editor } from '@tinymce/tinymce-react'; \r\n\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport Modal from '../__layout/Modal';\r\nconst { SearchBar, ClearSearchButton  } = Search;\r\n\r\nclass QuestionsComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cardStatus: false,\r\n            cardActive: \"\",\r\n            isModalOpen: false,\r\n            subjectId: '',\r\n            subjectName: '',\r\n            topicId: '',\r\n            topicName: '',\r\n            questionName: '',\r\n            questionTag: '',\r\n            questionChoice1: '',\r\n            questionChoice2: '',\r\n            questionChoice3: '',\r\n            questionChoice4: '',\r\n            questionSolution: '',\r\n            questionAnswer: '',\r\n            updateQuestionName: '',\r\n            updateQuestionTag: '',\r\n            updateQuestionChoice1: '',\r\n            updateQuestionChoice2: '',\r\n            updateQuestionChoice3: '',\r\n            updateQuestionChoice4: '',\r\n            updateQuestionSolution: '',\r\n            updateQuestionAnswer: '',\r\n\r\n        }\r\n        this.showCard = this.showCard.bind(this);\r\n        this.formCreateQuestion = this.formCreateQuestion.bind(this);\r\n        this.formEditQuestion = this.formEditQuestion.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onChangeTopic = this.onChangeTopic.bind(this);\r\n        this.onChangeText = this.onChangeText.bind(this);\r\n        this.onEditorChange = this.onEditorChange.bind(this);\r\n        // this.onChangeFile = this.onChangeFile.bind(this);\r\n        // this.onEditorChange = this.onEditorChange.bind( this );\r\n    }\r\n    componentDidMount(){\r\n        if (localStorage.getItem(\"pinnacleAdmin\") !== null) {\r\n            this.props.validateToken(this.state).then(tokenValidate => {\r\n                if(tokenValidate.payload.status !== 200){\r\n                    this.props.history.push(\"/login\");\r\n                }else{\r\n                    this.props.fetchSubjects();\r\n                }\r\n            });\r\n        }else {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.questionInfo){\r\n            // this.setState({disabled:false})\r\n            console.log(\">> \" + JSON.stringify(nextProps.questionInfo))\r\n            this.setState({disabled: false});\r\n            this.setState({updateQuestionTag:nextProps.questionInfo.data.tag})\r\n            this.setState({updateQuestionName:nextProps.questionInfo.data.question})\r\n            this.setState({updateQuestionChoice1:nextProps.questionInfo.data.choices[0]})\r\n            this.setState({updateQuestionChoice2:nextProps.questionInfo.data.choices[1]})\r\n            this.setState({updateQuestionChoice3:nextProps.questionInfo.data.choices[2]})\r\n            this.setState({updateQuestionChoice4:nextProps.questionInfo.data.choices[3]})\r\n            this.setState({updateQuestionAnswer:nextProps.questionInfo.data.answer})\r\n            this.setState({updateQuestionSolution:nextProps.questionInfo.data.solution})\r\n        }\r\n    }\r\n\r\n    showCard(todo, status, id){\r\n        if(status == \"show\"){\r\n            this.setState({cardStatus: true})\r\n            this.setState({cardActive: todo})\r\n            if(todo == \"view\"){\r\n                console.log(\"aaa>>> \" + id )\r\n                // this.setState({disabled: true});\r\n                this.props.fetchQuestionInfo(id);\r\n            }else if(todo == \"edit\"){\r\n                this.setState({disabled: true});\r\n                this.props.fetchQuestionInfo(id);\r\n            }\r\n            document.body.scrollTop = 0;\r\n            document.documentElement.scrollTop = 0;\r\n        }else{\r\n            this.setState({cardStatus: false})\r\n        }\r\n    }\r\n\r\n    onChange(e){\r\n        let subject = JSON.parse(e.target.value);\r\n        this.setState({subjectId: subject.id})\r\n        this.setState({subjectName: subject.name})\r\n        this.props.fetchTopic(subject.id)\r\n        // if(e.target.value == \"\"){\r\n        // }else{\r\n        // }\r\n    }\r\n\r\n    onChangeText(e){\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    onChangeTopic(e){\r\n        // console.log(this.state.subjectId);\r\n        if(e.target.value == \"\"){\r\n            this.setState({topicId: \"\"})\r\n        }else{\r\n            let topic = JSON.parse(e.target.value);\r\n            console.log(\">>>>>>>>> \" + topic)\r\n            this.setState({topicId: topic.id})\r\n            this.setState({topicName: topic.description})\r\n            this.props.fetchQuestions(this.state.subjectId, topic.id)\r\n        }\r\n    }\r\n\r\n    onEditorChange(evt) {\r\n        console.log(\"event>>> \" + evt)\r\n        if(this.state.cardActive === 'create'){\r\n            // this.setState({ questionName: evt.editor.getData() });\r\n            let testt11 = this.editorInstance.save();\r\n            console.log(\"testt11> \" + testt11)\r\n        }else if(this.state.cardActive === 'edit'){\r\n            this.setState({ updateQuestionName: evt.editor.getData() });\r\n        }\r\n        \r\n    }\r\n\r\n    formCreateQuestion(e){\r\n        e.preventDefault();\r\n        this.setState({disabled: true})\r\n        if(this.state.questionAnswer == \"\"){\r\n            this.setState({disabled: false})\r\n            notification(\"error\", `<i class = \"fa fa-check\"></i> Select answer first`)\r\n        }else{\r\n            let formData = {\r\n                \"tag\": this.state.questionTag,\r\n                \"name\": this.state.questionName,\r\n                \"solution\": this.state.questionSolution,\r\n                \"choices\": [this.state.questionChoice1, this.state.questionChoice2, this.state.questionChoice3, this.state.questionChoice4],\r\n                \"answer\": this.state.questionAnswer,\r\n                \"subjectId\": this.state.subjectId,\r\n                \"topicId\": this.state.topicId\r\n            }\r\n            console.log(\"FORM>>> \" + JSON.stringify(formData))\r\n            this.props.newQuestion(formData).then(res => {\r\n                console.log(\"ADDED>>> \" + JSON.stringify(res))\r\n                if(res.payload.result === \"success\"){\r\n                    notification(\"success\", `<i class = \"fa fa-check\"></i> ${res.payload.message}`)\r\n                    this.props.fetchQuestions(this.state.subjectId, this.state.topicId)\r\n                }else if(res.payload.result === \"error\"){\r\n                    notification(\"success\", `<i class = \"fa fa-check\"></i> ${res.payload.message}`)\r\n                }else{\r\n                    notification(\"error\", `<i class = \"fa fa-check\"></i> Something went wrong, Please try again`)\r\n                }\r\n                this.setState({questionName: \"\"});\r\n                this.setState({questionChoice1: \"\"})\r\n                this.setState({questionChoice2: \"\"})\r\n                this.setState({questionChoice3: \"\"})\r\n                this.setState({questionChoice4: \"\"})\r\n                this.setState({questionSolution: \"\"})\r\n                this.setState({questionAnswer: \"\"})\r\n                this.setState({disabled: false})\r\n                this.setState({cardStatus: false})\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    formEditQuestion(e){\r\n        e.preventDefault();\r\n        this.setState({disabled: true})\r\n        if(this.state.updateQuestionAnswer == \"\"){\r\n            notification(\"error\", `<i class = \"fa fa-check\"></i> Select answer first`)\r\n        }else{\r\n            let formData = {\r\n                \"tag\": this.state.updateQuestionTag,\r\n                \"question\": this.state.updateQuestionName,\r\n                \"solution\": this.state.updateQuestionSolution,\r\n                \"choices\": [this.state.updateQuestionChoice1, this.state.updateQuestionChoice2, this.state.updateQuestionChoice3, this.state.updateQuestionChoice4],\r\n                \"answer\": this.state.updateQuestionAnswer\r\n            }\r\n            console.log(\"FORM>>> \" + JSON.stringify(formData))\r\n            this.props.updateQuestion(this.props.questionInfo.data._id, formData).then(res => {\r\n                console.log(\"ADDED>>> \" + JSON.stringify(res))\r\n                if(res.payload.result === \"success\"){\r\n                    notification(\"success\", `<i class = \"fa fa-check\"></i> ${res.payload.message}`)\r\n                    this.props.fetchQuestions(this.state.subjectId, this.state.topicId)\r\n                }else if(res.payload.result === \"error\"){\r\n                    notification(\"success\", `<i class = \"fa fa-check\"></i> ${res.payload.message}`)\r\n                }else{\r\n                    notification(\"error\", `<i class = \"fa fa-check\"></i> Something went wrong, Please try again`)\r\n                }\r\n                // this.setState({questionName: \"\"});\r\n                // this.setState({questionChoice1: \"\"})\r\n                // this.setState({questionChoice2: \"\"})\r\n                // this.setState({questionChoice3: \"\"})\r\n                // this.setState({questionChoice4: \"\"})\r\n                // this.setState({questionSolution: \"\"})\r\n                // this.setState({questionAnswer: \"\"})\r\n                this.setState({disabled: false})\r\n                this.setState({cardStatus: false})\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleState = (id) => {\r\n        if (typeof id === 'undefined') {\r\n            this.setState({ isModalOpen: false});\r\n        }else{\r\n            this.setState({ isModalOpen: true});\r\n            this.props.fetchQuestionInfo(id);\r\n        }\r\n    };\r\n\r\n    handleEditorChange = (e) => {\r\n        \r\n        console.log('Content was updated:', e.target.getContent());\r\n        if(this.state.cardActive === 'create'){\r\n            this.setState({ questionName: e.target.getContent() });\r\n        }else if(this.state.cardActive === 'edit'){\r\n            console.log(\"HERERERERERERERER\")\r\n            this.setState({ updateQuestionName: e.target.getContent() });\r\n        }\r\n    }\r\n\r\n    handleEditorChangeSolution = (e) => {\r\n        console.log('Content was updated:', e.target.getContent());\r\n        if(this.state.cardActive === 'create'){\r\n            this.setState({ questionSolution: e.target.getContent() });\r\n        }else if(this.state.cardActive === 'edit'){\r\n            this.setState({ updateQuestionSolution: e.target.getContent() });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let questionsArr = new Array();\r\n        let $this = this;\r\n        if(this.state.subjectId !== \"\" && this.state.topicId !== \"\" && this.props.questionsLists){\r\n            // $this.setState({cardStatus: true})\r\n            // if(this.props.questionsLists){\r\n                console.log(\">>  \" + JSON.stringify(this.props.questionsLists))\r\n                this.props.questionsLists.forEach( q => {\r\n                    questionsArr.push({\r\n                        name: q.tag,\r\n                        answer: q.answer,\r\n                        action: <div className = \"\">\r\n                                    <button type=\"button\"  className=\"btn btn-primary btn-sm\" onClick={() =>  this.showCard('view', 'show', q._id)}> <FontAwesomeIcon icon = {faEye}/></button> &nbsp;\r\n                                    <button type=\"button\"  className=\"btn btn-success btn-sm\" onClick={() =>  this.showCard('edit', 'show', q._id)}> <FontAwesomeIcon icon = {faEdit}/></button> &nbsp;\r\n                                    <button type=\"button\"  className=\"btn btn-danger btn-sm\" onClick={() =>  this.toggleState(q._id)}> <FontAwesomeIcon icon = {faTrash}/></button>\r\n                                </div>\r\n                    })\r\n                });\r\n            // }\r\n        }else{\r\n            questionsArr = [];\r\n        }\r\n        let columns = [\r\n            { dataField: 'name', text: 'Name'},\r\n            { dataField: 'answer', text: 'Answer',   style: { width: '450px' }, searchable: true},\r\n            { dataField: 'action', text: 'Action', style: { width: '200px' } }\r\n        ]\r\n        return (\r\n            <div>\r\n                <SideNavComponent/>\r\n                <div className=\"main\">\r\n                    <NavbarComponent/>\r\n                    <div className=\"container\">\r\n                        <div className = \"col\">\r\n                            <br/>\r\n                            <h2>Questions</h2>\r\n                            <ol className=\"breadcrumb\">\r\n                                <li className=\"breadcrumb-item\"><a href=\"#\">Dashboard</a></li>\r\n                                <li className=\"breadcrumb-item\">Questions</li>\r\n                            </ol>\r\n                            <div className = \"row\">\r\n                                <div>\r\n                                    {this.state.isModalOpen && (\r\n                                    <Modal id=\"modal\" isOpen={this.state.isModalOpen} onClose={this.toggleState} title = \"Delete\" type = \"delete-question\" data = {this.props.questionInfo ? this.props.questionInfo.data : \"\"}>\r\n                                        <div className=\"box-body\">Are you sure you want to delete this <b> {this.state.questionInfo ? this.state.questionInfo.data.tag : \"\"} </b>?</div>\r\n                                    </Modal>\r\n                                    )}\r\n                                </div>\r\n                                { this.state.cardStatus == true ?\r\n                                    <div className = \"col-md-12\">\r\n                                        <div className=\"card card-custom-border\">\r\n                                            <div className=\"card-header\">\r\n                                                {this.state.cardActive == \"create\" ? \"Create new question\": \"\"}\r\n                                                {this.state.cardActive == \"edit\" ? \"Edit question\": \"\"}\r\n                                                {this.state.cardActive == \"view\" ? \"Question Information\" : \"\"}\r\n                                                <small className = \"float-right\">\r\n                                                    <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'hide')}>\r\n                                                        <FontAwesomeIcon icon = {faTimes}/> Close\r\n                                                    </a>\r\n                                                </small>\r\n                                            </div>\r\n                                            <div className=\"card-body\">\r\n\r\n\r\n                                                {this.state.cardActive == \"create\" ? \r\n                                                    <form onSubmit = {this.formCreateQuestion} id = \"createQuestionForm\">\r\n                                                        <div className=\"form-group\">\r\n                                                            <p>Selected Subject: {this.state.subjectName}</p>\r\n                                                            <p>Selected Topic: {this.state.topicName}</p>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Tag</label>\r\n                                                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter question tag\" name = \"questionTag\" value = {this.state.questionTag} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Title</label>\r\n                                                            <Editor\r\n                                                                initialValue=\"\"\r\n                                                                init={{\r\n                                                                height: 500,\r\n                                                                menubar: false,\r\n                                                                plugins: [\r\n                                                                    'font image underline',\r\n                                                                    'advlist autolink lists link image charmap print preview anchor',\r\n                                                                    'searchreplace visualblocks code fullscreen',\r\n                                                                    'insertdatetime media table paste code help wordcount'\r\n                                                                ],\r\n                                                                // plugins: [\r\n                                                                //     'lists link image paste help wordcount'\r\n                                                                // ],\r\n                                                                toolbar:\r\n                                                                    'font undo redo | formatselect | bold italic underline backcolor | \\\r\n                                                                    alignleft aligncenter alignright alignjustify | \\\r\n                                                                    bullist numlist outdent indent | removeformat image | help'\r\n                                                                }}\r\n                                                                onChange={this.handleEditorChange}\r\n                                                          />\r\n                                                            {/* <EditorJs instanceRef={instance => this.editorInstance = instance}  data={this.onEditorChange} tools={EDITOR_JS_TOOLS} />; */}\r\n                                                            {/* <CKEditor\r\n                                                                editor={ ClassicEditor }\r\n                                                                data=\"\"\r\n                                                                onChange={this.onEditorChange}\r\n                                                            /> */}\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Choices</label>\r\n                                                            <div className = \"row\">\r\n                                                                <div className = \"col-md-6\">\r\n                                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Choice A\" name = \"questionChoice1\" value = {this.state.questionChoice1} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                                </div>\r\n                                                                <div className = \"col-md-6\">\r\n                                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Choice B\" name = \"questionChoice2\" value = {this.state.questionChoice2} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                                </div>\r\n                                                                <div className = \"col-md-6\">\r\n                                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Choice C\" name = \"questionChoice3\" value = {this.state.questionChoice3} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                                </div>\r\n                                                                <div className = \"col-md-6\">\r\n                                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Choice D\" name = \"questionChoice4\" value = {this.state.questionChoice4} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Answer</label>\r\n                                                            <select className = \"form-control\" name = \"questionAnswer\" onChange = {this.onChangeText}  disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                                <option value = \"\"></option>\r\n                                                                {this.state.questionChoice1 === \"\" ? \"\" : <option key = {this.state.questionChoice1} value = {this.state.questionChoice1}>{this.state.questionChoice1}</option>}\r\n                                                                {this.state.questionChoice2 === \"\" ? \"\" : <option key = {this.state.questionChoice2} value = {this.state.questionChoice2}>{this.state.questionChoice2}</option>}\r\n                                                                {this.state.questionChoice3 === \"\" ? \"\" : <option key = {this.state.questionChoice3} value = {this.state.questionChoice3}>{this.state.questionChoice3}</option>}\r\n                                                                {this.state.questionChoice4 === \"\" ? \"\" : <option key = {this.state.questionChoice4} value = {this.state.questionChoice4}>{this.state.questionChoice4}</option>}\r\n                                                            </select>\r\n                                                            {/* <input type=\"text\" className=\"form-control\" placeholder=\"Enter Answer\" name = \"questionAnswer\" value = {this.state.questionAnswer} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> */}\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Solution</label>\r\n                                                            {/* <input type=\"text\" className=\"form-control\" placeholder=\"Enter solution\" name = \"questionSolution\" value = {this.state.questionSolution} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> */}\r\n                                                            <Editor\r\n                                                                initialValue=\"\"\r\n                                                                init={{\r\n                                                                height: 300,\r\n                                                                menubar: false,\r\n                                                                plugins: [\r\n                                                                    'table image underline',\r\n                                                                    'advlist autolink lists link image charmap print preview anchor',\r\n                                                                    'searchreplace visualblocks code fullscreen',\r\n                                                                    'insertdatetime media table paste code help wordcount'\r\n                                                                ],\r\n                                                                // plugins: [\r\n                                                                //     'lists link image paste help wordcount'\r\n                                                                // ],\r\n                                                                toolbar:\r\n                                                                    'table font-size undo redo | formatselect | bold italic underline backcolor | \\\r\n                                                                    alignleft aligncenter alignright alignjustify | \\\r\n                                                                    bullist numlist outdent indent | removeformat image | help'\r\n                                                                }}\r\n                                                                onChange={this.handleEditorChangeSolution}\r\n                                                          />\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                            {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </form>\r\n                                                : \"\"}\r\n\r\n                                                {this.state.cardActive == \"edit\" ? \r\n                                                    <form onSubmit = {this.formEditQuestion} id = \"createEditForm\">\r\n                                                        <div className=\"form-group\">\r\n                                                            <p>Selected Subject: {this.state.subjectName}</p>\r\n                                                            <p>Selected Topic: {this.state.topicName}</p>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Tag</label>\r\n                                                            <input type=\"text\" className=\"form-control\" placeholder=\"Enter question tag\" name = \"updateQuestionTag\" value = {this.state.updateQuestionTag} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Question</label>\r\n                                                            {/* <CKEditor\r\n                                                                editor={ ClassicEditor }\r\n                                                                data={this.state.updateQuestionName}\r\n                                                                onChange={this.onEditorChange}\r\n                                                            /> */}\r\n                                                            <Editor\r\n                                                                initialValue={this.state.updateQuestionName}\r\n                                                                init={{\r\n                                                                height: 300,\r\n                                                                menubar: false,\r\n                                                                plugins: [\r\n                                                                    'image underline',\r\n                                                                    'advlist autolink lists link image charmap print preview anchor',\r\n                                                                    'searchreplace visualblocks code fullscreen',\r\n                                                                    'insertdatetime media table paste code help wordcount'\r\n                                                                ],\r\n                                                                // plugins: [\r\n                                                                //     'lists link image paste help wordcount'\r\n                                                                // ],\r\n                                                                toolbar:\r\n                                                                    'table undo redo | formatselect | bold italic underline backcolor | \\\r\n                                                                    alignleft aligncenter alignright alignjustify | \\\r\n                                                                    bullist numlist outdent indent | removeformat image | help'\r\n                                                                }}\r\n                                                                onChange={this.handleEditorChange}\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Choices</label>\r\n                                                            <div className = \"row\">\r\n                                                                <div className = \"col-md-6\">\r\n                                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Choice A\" name = \"updateQuestionChoice1\" value = {this.state.updateQuestionChoice1} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                                </div>\r\n                                                                <div className = \"col-md-6\">\r\n                                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Choice B\" name = \"updateQuestionChoice2\" value = {this.state.updateQuestionChoice2} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                                 </div>\r\n                                                                <div className = \"col-md-6\">\r\n                                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Choice C\" name = \"updateQuestionChoice3\" value = {this.state.updateQuestionChoice3} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                                </div>\r\n                                                                <div className = \"col-md-6\">\r\n                                                                    <input type=\"text\" className=\"form-control\" placeholder=\"Choice D\" name = \"updateQuestionChoice4\" value = {this.state.updateQuestionChoice4} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Answer</label>\r\n                                                            <p><b>Current Answer:</b> {this.state.updateQuestionAnswer} </p>\r\n                                                            <select className = \"form-control\" name = \"updateQuestionAnswer\" onChange = {this.onChangeText}  disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                                <option value = \"\"></option>\r\n                                                                {this.state.updateQuestionChoice1 == \"\" ? \"\" : <option key = {this.state.updateQuestionChoice1} value = {this.state.updateQuestionChoice1}>{this.state.updateQuestionChoice1}</option>}\r\n                                                                {this.state.updateQuestionChoice2 == \"\" ? \"\" : <option key = {this.state.updateQuestionChoice2} value = {this.state.updateQuestionChoice2}>{this.state.updateQuestionChoice2}</option>}\r\n                                                                {this.state.updateQuestionChoice3 == \"\" ? \"\" : <option key = {this.state.updateQuestionChoice3} value = {this.state.updateQuestionChoice3}>{this.state.updateQuestionChoice3}</option>}\r\n                                                                {this.state.updateQuestionChoice4 == \"\" ? \"\" : <option key = {this.state.updateQuestionChoice4} value = {this.state.updateQuestionChoice4}>{this.state.updateQuestionChoice4}</option>}                                                               \r\n                                                            </select>\r\n                                                            {/* <input type=\"text\" className=\"form-control\" placeholder=\"Enter Answer\" name = \"questionAnswer\" value = {this.state.questionAnswer} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> */}\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label for=\"name\">Solution</label>\r\n                                                            {/* <input type=\"text\" className=\"form-control\" placeholder=\"Enter solution\" name = \"updateQuestionSolution\" value = {this.state.updateQuestionSolution} onChange = {this.onChangeText} required disabled = {(this.state.disabled)? \"disabled\" : \"\"}/> */}\r\n                                                            <Editor\r\n                                                                initialValue={this.state.updateQuestionSolution}\r\n                                                                init={{\r\n                                                                height: 300,\r\n                                                                menubar: false,\r\n                                                                plugins: [\r\n                                                                    'font-size image underline',\r\n                                                                    'advlist autolink lists link image charmap print preview anchor',\r\n                                                                    'searchreplace visualblocks code fullscreen',\r\n                                                                    'insertdatetime media table paste code help wordcount'\r\n                                                                ],\r\n                                                                // plugins: [\r\n                                                                //     'lists link image paste help wordcount'\r\n                                                                // ],\r\n                                                                toolbar:\r\n                                                                    'font-size undo redo | formatselect | bold italic underline backcolor | \\\r\n                                                                    alignleft aligncenter alignright alignjustify | \\\r\n                                                                    bullist numlist outdent indent | removeformat image | help'\r\n                                                                }}\r\n                                                                onChange={this.handleEditorChangeSolution}\r\n                                                          />\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled = {(this.state.disabled)? \"disabled\" : \"\"}>\r\n                                                            {this.state.disabled ? <div className=\"spinner-border\" role=\"status\"> <span className=\"sr-only\">Loading...</span> </div> : 'Submit'}\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </form>\r\n                                                : \"\"}\r\n\r\n                                                {this.state.cardActive == \"view\" ? \r\n                                                    this.props.questionInfo ?\r\n                                                        <div>\r\n                                                            <p>Subject Name:<b> {this.state.subjectName}</b></p>\r\n                                                            <p>Topic Name:<b> {this.state.topicName}</b></p>\r\n                                                            <p>Question Tag: <b>{this.props.questionInfo.data.tag}</b></p>\r\n                                                            <div class=\"alert alert-secondary\">\r\n                                                                <div dangerouslySetInnerHTML={{ __html: this.props.questionInfo.data.question }} />\r\n                                                            </div>\r\n                                                            <p>Choices: </p>\r\n                                                            <p><b>A. {this.props.questionInfo.data.choices[0]}</b></p>\r\n                                                            <p><b>B. {this.props.questionInfo.data.choices[1]}</b></p>\r\n                                                            <p><b>C. {this.props.questionInfo.data.choices[2]}</b></p>\r\n                                                            <p><b>D. {this.props.questionInfo.data.choices[3]}</b></p>\r\n                                                            <hr/>\r\n                                                            <p>Answer: <b>{this.props.questionInfo.data.answer}</b></p>\r\n                                                            <hr/>\r\n                                                            <p>Solution:  <div dangerouslySetInnerHTML={{ __html: this.props.questionInfo.data.solution }} /></p>\r\n\r\n                                                        </div> \r\n                                                     : <div><i class=\"fa fa-spinner fa-spin\"></i> Loading content... </div>\r\n                                                : \"\" }\r\n                                            </div>\r\n                                        </div>\r\n                                        <hr/>\r\n                                    </div>\r\n                                : \"\" }\r\n                                \r\n\r\n                                <div className = \"col-md-12\">\r\n                                    <div className=\"card card-custom-border\">\r\n                                        <div className=\"card-header\">\r\n                                            Content box\r\n                                            <small className = \"float-right\">\r\n                                                {\r\n                                                    this.state.subjectId !== \"\" && this.state.topicId !== \"\" && this.props.questionsLists  ?  <a className = \"card-link\" onClick = {this.showCard.bind(this, 'create', 'show', '')}><FontAwesomeIcon icon = {faPlus}/> Add new question</a> : \"\"\r\n                                                }\r\n                                            </small>\r\n                                        </div>\r\n                                        <div className=\"card-body\">\r\n                                            <div className = \"row\">\r\n                                                <div className = \"col-md-6\">\r\n                                                    {this.props.subjectLists ? \r\n                                                        this.props.subjectLists.subjects.length > 0 \r\n                                                        ? \r\n                                                        <select className = \"form-control\" name = \"subjectId\" id = \"subjectId\" onChange = {this.onChange} > <option value = \"\">Select Subject</option>{ this.props.subjectLists.subjects.map(subj => <option value = {JSON.stringify(subj)} key = {subj.id} data-subject = {subj.name}>{subj.name}</option>) } </select> \r\n                                                        : \"\"\r\n                                                    : \r\n                                                    <div><i class=\"fa fa-spinner fa-spin\"></i> Loading subjects... </div>\r\n                                                    }\r\n                                                </div>\r\n                                                <div className = \"col-md-6\">\r\n                                                    {this.props.topicLists ? \r\n                                                        this.props.topicLists.length > 0 ? \r\n                                                            <div>\r\n                                                                <select className = \"form-control\" onChange = {this.onChangeTopic} > \r\n                                                                    <option value = \"\">Select Topic</option>\r\n                                                                    { this.props.topicLists.map(top => <option key = {top.id} value = {JSON.stringify(top)}>{top.description}</option>) } \r\n                                                                </select>\r\n                                                            </div>\r\n                                                        : <label className = \"text text-danger\">Topic currently empty</label>\r\n                                                    : \r\n                                                        \"\"\r\n                                                    }\r\n                                                </div>\r\n                                                <br/><br/>\r\n                                                <div class = \"container\">\r\n                                                    <div class=\" card\">\r\n                                                        <div class=\"card-body\">    \r\n                                                            {this.state.topicId == '' ? \r\n                                                                <div class=\"alert alert-dismissible alert-primary\">\r\n                                                                    <strong>Select Topic first</strong>\r\n                                                                </div>\r\n                                                            : \r\n                                                                            <ToolkitProvider\r\n                                                                            keyField=\"id\"\r\n                                                                            data={ questionsArr }\r\n                                                                            columns={ columns }\r\n                                                                            search\r\n                                                                            >\r\n                                                                            {\r\n                                                                                props => (\r\n                                                                                <div>\r\n                                                                                    <SearchBar { ...props.searchProps } />\r\n                                                                                    {/* <ClearSearchButton { ...props.searchProps } /> */}\r\n                                                                                    <hr />\r\n                                                                                    <BootstrapTable { ...props.baseProps } pagination={ paginationFactory() }/>\r\n                                                                                </div>\r\n                                                                                )\r\n                                                                            }\r\n                                                                            </ToolkitProvider>\r\n                                                            }\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    validateToken: state.validateToken.testData,\r\n    subjectLists: state.subjects.items.data,\r\n    topicLists: state.topics.items.data,\r\n    questionsLists: state.questions.items.data,\r\n    newQuestion: state.questions.question,\r\n    questionInfo: state.questions.info\r\n})\r\n\r\nexport default connect(mapStateToProps, { \r\n    validateToken,\r\n    fetchSubjects, \r\n    fetchTopic,\r\n    fetchQuestions,\r\n    newQuestion,\r\n    fetchQuestionInfo,\r\n    updateQuestion\r\n})(QuestionsComponent);\r\n","import axios from 'axios';\r\nimport { FETCH_MOCK, MOCK_INFO, NEW_MOCK_EXAM } from '../types';\r\nimport { receiveData } from '../payload'\r\nimport { BasePath, headerNonUser } from '../env';\r\nimport lesson from '../../components/lesson';\r\n\r\nexport function fetchMock(){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/mock`, headerAdminUser)\r\n        .then((response) => {\r\n            return dispatch(receiveData(FETCH_MOCK, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            return dispatch(receiveData(FETCH_MOCK, error))\r\n        })\r\n    }\r\n}\r\n\r\nexport function fetchMockInfo(id){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.get(`${BasePath}/mock/subjects/${id}/generate`, headerAdminUser)\r\n        .then((response) => {\r\n            console.log(response)\r\n            return dispatch(receiveData(MOCK_INFO, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return dispatch(receiveData(MOCK_INFO, error))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function newMockExam(formData){\r\n    return function(dispatch){\r\n        let headerAdminUser = {\r\n            headers: {\r\n                'x-client-id': 'Jeyk',\r\n                'x-client-secret': 'Qwe12345',\r\n                'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n            }\r\n        }\r\n        return axios.post(`${BasePath}/mock`, formData, headerAdminUser)\r\n        .then((response) => {\r\n            // console.log(response)\r\n            return dispatch(receiveData(NEW_MOCK_EXAM, response.data))\r\n        })\r\n        .catch(function (error) {\r\n            // console.log(error.response.data)\r\n            return dispatch(receiveData(NEW_MOCK_EXAM, error.response.data))\r\n        })\r\n    }\r\n}\r\n\r\n// export function updateLesson(topicId, lessonId, formData){\r\n//     return function(dispatch){\r\n//         let headerAdminUser = {\r\n//             headers: {\r\n//                 'x-client-id': 'Jeyk',\r\n//                 'x-client-secret': 'Qwe12345',\r\n//                 'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n//             }\r\n//         }\r\n//         return axios.put(`${BasePath}/topics/${topicId}/lessons/${lessonId}`, formData, headerAdminUser)\r\n//         .then((response) => {\r\n//             return dispatch(receiveData(LESSON_UPDATE, response.data))\r\n//         })\r\n//         .catch(function (error) {\r\n//             return dispatch(receiveData(LESSON_UPDATE, error))\r\n//         })\r\n//     }\r\n// }\r\n\r\n// export function deleteLesson(topicId, lessonId){\r\n//     return function(dispatch){\r\n//         let headerAdminUser = {\r\n//             headers: {\r\n//                 'x-client-id': 'Jeyk',\r\n//                 'x-client-secret': 'Qwe12345',\r\n//                 'token': JSON.parse(localStorage.getItem(\"pinnacleAdmin\")).token\r\n//             }\r\n//         }\r\n//         return axios.delete(`${BasePath}/topics/${topicId}/lessons/${lessonId}`, headerAdminUser)\r\n//         .then((response) => {\r\n//             return dispatch(receiveData(LESSON_DELETE, response.data))\r\n//         })\r\n//         .catch(function (error) {\r\n//             return dispatch(receiveData(LESSON_DELETE, error))\r\n//         })\r\n//     }\r\n// }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { FETCH_LESSONS, NEW_LESSON, LESSON_INFO, LESSON_UPDATE, LESSON_DELETE } from '../../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    switch (action.type){\r\n        case FETCH_LESSONS: \r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case NEW_LESSON:\r\n            return {\r\n                ...state,\r\n                lesson: action.payload\r\n        }\r\n        case LESSON_INFO:\r\n            return {\r\n                ...state,\r\n                info: action.payload\r\n            }\r\n        case LESSON_UPDATE:\r\n            return {\r\n                ...state,\r\n                lessonUpdate: action.payload\r\n            }\r\n        case LESSON_DELETE:\r\n            return {\r\n                ...state,\r\n                lessonDelete: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { FETCH_MOCK, MOCK_INFO, NEW_MOCK_EXAM } from '../../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    switch (action.type){\r\n        case FETCH_MOCK: \r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case NEW_MOCK_EXAM:\r\n            return {\r\n                ...state,\r\n                list: action.payload\r\n        }\r\n        case MOCK_INFO:\r\n            return {\r\n                ...state,\r\n                info: action.payload\r\n            }\r\n        // case LESSON_UPDATE:\r\n        //     return {\r\n        //         ...state,\r\n        //         lessonUpdate: action.payload\r\n        //     }\r\n        // case LESSON_DELETE:\r\n        //     return {\r\n        //         ...state,\r\n        //         lessonDelete: action.payload\r\n        //     }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { \r\n    FETCH_SUBJECT_CODE, \r\n    NEW_SUBJECT_CODE, \r\n    SUBJECT_CODE_INFO, \r\n    SUBJECT_CODE_UPDATE, \r\n    RESEND_SUBJECT_CODE \r\n} from '../../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    switch (action.type){\r\n        case FETCH_SUBJECT_CODE: \r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case NEW_SUBJECT_CODE:\r\n            return {\r\n                ...state,\r\n                new: action.payload\r\n        }\r\n        case SUBJECT_CODE_INFO:\r\n            return {\r\n                ...state,\r\n                info: action.payload\r\n            }\r\n        case SUBJECT_CODE_UPDATE:\r\n            return {\r\n                ...state,\r\n                subjectCodeUpdate: action.payload\r\n            }\r\n        case RESEND_SUBJECT_CODE:\r\n            return {\r\n                ...state,\r\n                subjectCodeResend: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport postReducers from './module/postReducers';\r\nimport loginReducers from './module/loginReducers';\r\nimport validateAdminReducers from './module/validateAdminReducers';\r\nimport subjectReducers from './module/subjectReducers';\r\nimport uploadFileReducers from './module/uploadFileReducers';\r\nimport userReducers from './module/userReducers';\r\nimport newsReducers from './module/newsReducers';\r\nimport topicReducers from './module/topicReducers';\r\nimport questionsReducers from './module/questionsReducers';\r\nimport lessonReducers from './module/lessonReducers';\r\nimport mockReducers from './module/mockReducers';\r\nimport subjectCodeReducers from './module/subjectCodeReducers';\r\n\r\n\r\nexport default combineReducers({\r\n    login: loginReducers,\r\n    posts: postReducers,\r\n    validateToken:  validateAdminReducers,\r\n    subjects: subjectReducers,\r\n    file: uploadFileReducers,\r\n    users: userReducers,\r\n    news: newsReducers,\r\n    topics: topicReducers,\r\n    questions: questionsReducers,\r\n    lessons: lessonReducers,\r\n    mock: mockReducers,\r\n    subjectCode: subjectCodeReducers\r\n})","import {createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nexport default store;\r\n","import { FETCH_QUESTIONS, CREATE_QUESTION, QUESTION_INFO, QUESTION_UPDATE, QUESTIONS_DELETE } from '../../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    switch (action.type){\r\n        case FETCH_QUESTIONS: \r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            }\r\n        case CREATE_QUESTION:\r\n            return {\r\n                ...state,\r\n                question: action.payload\r\n        }\r\n        case QUESTION_INFO:\r\n            return {\r\n                ...state,\r\n                info: action.payload\r\n            }\r\n        case QUESTION_UPDATE:\r\n            return {\r\n                ...state,\r\n                questionUpdate: action.payload\r\n            }\r\n        case QUESTIONS_DELETE:\r\n            return {\r\n                ...state,\r\n                questionDelete: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}